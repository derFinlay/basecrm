// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/derfinlay/basecrm/ent/billingaddress"
	"github.com/derfinlay/basecrm/ent/customer"
	"github.com/derfinlay/basecrm/ent/order"
)

// BillingAddress is the model entity for the BillingAddress schema.
type BillingAddress struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// City holds the value of the "city" field.
	City string `json:"city,omitempty"`
	// Street holds the value of the "street" field.
	Street string `json:"street,omitempty"`
	// Zip holds the value of the "zip" field.
	Zip string `json:"zip,omitempty"`
	// Housenumber holds the value of the "housenumber" field.
	Housenumber string `json:"housenumber,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BillingAddressQuery when eager-loading is set.
	Edges                      BillingAddressEdges `json:"edges"`
	customer_billing_addresses *int
	order_billing_address      *int
	selectValues               sql.SelectValues
}

// BillingAddressEdges holds the relations/edges for other nodes in the graph.
type BillingAddressEdges struct {
	// Notes holds the value of the notes edge.
	Notes []*Note `json:"notes,omitempty"`
	// Customer holds the value of the customer edge.
	Customer *Customer `json:"customer,omitempty"`
	// Order holds the value of the order edge.
	Order *Order `json:"order,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// NotesOrErr returns the Notes value or an error if the edge
// was not loaded in eager-loading.
func (e BillingAddressEdges) NotesOrErr() ([]*Note, error) {
	if e.loadedTypes[0] {
		return e.Notes, nil
	}
	return nil, &NotLoadedError{edge: "notes"}
}

// CustomerOrErr returns the Customer value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BillingAddressEdges) CustomerOrErr() (*Customer, error) {
	if e.loadedTypes[1] {
		if e.Customer == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: customer.Label}
		}
		return e.Customer, nil
	}
	return nil, &NotLoadedError{edge: "customer"}
}

// OrderOrErr returns the Order value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BillingAddressEdges) OrderOrErr() (*Order, error) {
	if e.loadedTypes[2] {
		if e.Order == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: order.Label}
		}
		return e.Order, nil
	}
	return nil, &NotLoadedError{edge: "order"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*BillingAddress) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case billingaddress.FieldID:
			values[i] = new(sql.NullInt64)
		case billingaddress.FieldCity, billingaddress.FieldStreet, billingaddress.FieldZip, billingaddress.FieldHousenumber:
			values[i] = new(sql.NullString)
		case billingaddress.FieldCreatedAt, billingaddress.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case billingaddress.ForeignKeys[0]: // customer_billing_addresses
			values[i] = new(sql.NullInt64)
		case billingaddress.ForeignKeys[1]: // order_billing_address
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the BillingAddress fields.
func (ba *BillingAddress) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case billingaddress.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ba.ID = int(value.Int64)
		case billingaddress.FieldCity:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field city", values[i])
			} else if value.Valid {
				ba.City = value.String
			}
		case billingaddress.FieldStreet:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field street", values[i])
			} else if value.Valid {
				ba.Street = value.String
			}
		case billingaddress.FieldZip:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field zip", values[i])
			} else if value.Valid {
				ba.Zip = value.String
			}
		case billingaddress.FieldHousenumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field housenumber", values[i])
			} else if value.Valid {
				ba.Housenumber = value.String
			}
		case billingaddress.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ba.CreatedAt = value.Time
			}
		case billingaddress.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ba.UpdatedAt = value.Time
			}
		case billingaddress.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field customer_billing_addresses", value)
			} else if value.Valid {
				ba.customer_billing_addresses = new(int)
				*ba.customer_billing_addresses = int(value.Int64)
			}
		case billingaddress.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field order_billing_address", value)
			} else if value.Valid {
				ba.order_billing_address = new(int)
				*ba.order_billing_address = int(value.Int64)
			}
		default:
			ba.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the BillingAddress.
// This includes values selected through modifiers, order, etc.
func (ba *BillingAddress) Value(name string) (ent.Value, error) {
	return ba.selectValues.Get(name)
}

// QueryNotes queries the "notes" edge of the BillingAddress entity.
func (ba *BillingAddress) QueryNotes() *NoteQuery {
	return NewBillingAddressClient(ba.config).QueryNotes(ba)
}

// QueryCustomer queries the "customer" edge of the BillingAddress entity.
func (ba *BillingAddress) QueryCustomer() *CustomerQuery {
	return NewBillingAddressClient(ba.config).QueryCustomer(ba)
}

// QueryOrder queries the "order" edge of the BillingAddress entity.
func (ba *BillingAddress) QueryOrder() *OrderQuery {
	return NewBillingAddressClient(ba.config).QueryOrder(ba)
}

// Update returns a builder for updating this BillingAddress.
// Note that you need to call BillingAddress.Unwrap() before calling this method if this BillingAddress
// was returned from a transaction, and the transaction was committed or rolled back.
func (ba *BillingAddress) Update() *BillingAddressUpdateOne {
	return NewBillingAddressClient(ba.config).UpdateOne(ba)
}

// Unwrap unwraps the BillingAddress entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ba *BillingAddress) Unwrap() *BillingAddress {
	_tx, ok := ba.config.driver.(*txDriver)
	if !ok {
		panic("ent: BillingAddress is not a transactional entity")
	}
	ba.config.driver = _tx.drv
	return ba
}

// String implements the fmt.Stringer.
func (ba *BillingAddress) String() string {
	var builder strings.Builder
	builder.WriteString("BillingAddress(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ba.ID))
	builder.WriteString("city=")
	builder.WriteString(ba.City)
	builder.WriteString(", ")
	builder.WriteString("street=")
	builder.WriteString(ba.Street)
	builder.WriteString(", ")
	builder.WriteString("zip=")
	builder.WriteString(ba.Zip)
	builder.WriteString(", ")
	builder.WriteString("housenumber=")
	builder.WriteString(ba.Housenumber)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(ba.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ba.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// BillingAddresses is a parsable slice of BillingAddress.
type BillingAddresses []*BillingAddress
