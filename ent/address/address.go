// Code generated by ent, DO NOT EDIT.

package address

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the address type in the database.
	Label = "address"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCity holds the string denoting the city field in the database.
	FieldCity = "city"
	// FieldStreet holds the string denoting the street field in the database.
	FieldStreet = "street"
	// FieldZip holds the string denoting the zip field in the database.
	FieldZip = "zip"
	// FieldNumber holds the string denoting the number field in the database.
	FieldNumber = "number"
	// Table holds the table name of the address in the database.
	Table = "addresses"
)

// Columns holds all SQL columns for address fields.
var Columns = []string{
	FieldID,
	FieldCity,
	FieldStreet,
	FieldZip,
	FieldNumber,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "addresses"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"customer_addresses",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// CityValidator is a validator for the "city" field. It is called by the builders before save.
	CityValidator func(string) error
	// StreetValidator is a validator for the "street" field. It is called by the builders before save.
	StreetValidator func(string) error
	// ZipValidator is a validator for the "zip" field. It is called by the builders before save.
	ZipValidator func(string) error
	// NumberValidator is a validator for the "number" field. It is called by the builders before save.
	NumberValidator func(string) error
)

// OrderOption defines the ordering options for the Address queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCity orders the results by the city field.
func ByCity(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCity, opts...).ToFunc()
}

// ByStreet orders the results by the street field.
func ByStreet(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStreet, opts...).ToFunc()
}

// ByZip orders the results by the zip field.
func ByZip(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldZip, opts...).ToFunc()
}

// ByNumber orders the results by the number field.
func ByNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNumber, opts...).ToFunc()
}
