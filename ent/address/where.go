// Code generated by ent, DO NOT EDIT.

package address

import (
	"entgo.io/ent/dialect/sql"
	"github.com/derfinlay/basecrm/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Address {
	return predicate.Address(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Address {
	return predicate.Address(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Address {
	return predicate.Address(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Address {
	return predicate.Address(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Address {
	return predicate.Address(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Address {
	return predicate.Address(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Address {
	return predicate.Address(sql.FieldLTE(FieldID, id))
}

// City applies equality check predicate on the "city" field. It's identical to CityEQ.
func City(v string) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldCity, v))
}

// Street applies equality check predicate on the "street" field. It's identical to StreetEQ.
func Street(v string) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldStreet, v))
}

// Zip applies equality check predicate on the "zip" field. It's identical to ZipEQ.
func Zip(v string) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldZip, v))
}

// Number applies equality check predicate on the "number" field. It's identical to NumberEQ.
func Number(v string) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldNumber, v))
}

// CityEQ applies the EQ predicate on the "city" field.
func CityEQ(v string) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldCity, v))
}

// CityNEQ applies the NEQ predicate on the "city" field.
func CityNEQ(v string) predicate.Address {
	return predicate.Address(sql.FieldNEQ(FieldCity, v))
}

// CityIn applies the In predicate on the "city" field.
func CityIn(vs ...string) predicate.Address {
	return predicate.Address(sql.FieldIn(FieldCity, vs...))
}

// CityNotIn applies the NotIn predicate on the "city" field.
func CityNotIn(vs ...string) predicate.Address {
	return predicate.Address(sql.FieldNotIn(FieldCity, vs...))
}

// CityGT applies the GT predicate on the "city" field.
func CityGT(v string) predicate.Address {
	return predicate.Address(sql.FieldGT(FieldCity, v))
}

// CityGTE applies the GTE predicate on the "city" field.
func CityGTE(v string) predicate.Address {
	return predicate.Address(sql.FieldGTE(FieldCity, v))
}

// CityLT applies the LT predicate on the "city" field.
func CityLT(v string) predicate.Address {
	return predicate.Address(sql.FieldLT(FieldCity, v))
}

// CityLTE applies the LTE predicate on the "city" field.
func CityLTE(v string) predicate.Address {
	return predicate.Address(sql.FieldLTE(FieldCity, v))
}

// CityContains applies the Contains predicate on the "city" field.
func CityContains(v string) predicate.Address {
	return predicate.Address(sql.FieldContains(FieldCity, v))
}

// CityHasPrefix applies the HasPrefix predicate on the "city" field.
func CityHasPrefix(v string) predicate.Address {
	return predicate.Address(sql.FieldHasPrefix(FieldCity, v))
}

// CityHasSuffix applies the HasSuffix predicate on the "city" field.
func CityHasSuffix(v string) predicate.Address {
	return predicate.Address(sql.FieldHasSuffix(FieldCity, v))
}

// CityEqualFold applies the EqualFold predicate on the "city" field.
func CityEqualFold(v string) predicate.Address {
	return predicate.Address(sql.FieldEqualFold(FieldCity, v))
}

// CityContainsFold applies the ContainsFold predicate on the "city" field.
func CityContainsFold(v string) predicate.Address {
	return predicate.Address(sql.FieldContainsFold(FieldCity, v))
}

// StreetEQ applies the EQ predicate on the "street" field.
func StreetEQ(v string) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldStreet, v))
}

// StreetNEQ applies the NEQ predicate on the "street" field.
func StreetNEQ(v string) predicate.Address {
	return predicate.Address(sql.FieldNEQ(FieldStreet, v))
}

// StreetIn applies the In predicate on the "street" field.
func StreetIn(vs ...string) predicate.Address {
	return predicate.Address(sql.FieldIn(FieldStreet, vs...))
}

// StreetNotIn applies the NotIn predicate on the "street" field.
func StreetNotIn(vs ...string) predicate.Address {
	return predicate.Address(sql.FieldNotIn(FieldStreet, vs...))
}

// StreetGT applies the GT predicate on the "street" field.
func StreetGT(v string) predicate.Address {
	return predicate.Address(sql.FieldGT(FieldStreet, v))
}

// StreetGTE applies the GTE predicate on the "street" field.
func StreetGTE(v string) predicate.Address {
	return predicate.Address(sql.FieldGTE(FieldStreet, v))
}

// StreetLT applies the LT predicate on the "street" field.
func StreetLT(v string) predicate.Address {
	return predicate.Address(sql.FieldLT(FieldStreet, v))
}

// StreetLTE applies the LTE predicate on the "street" field.
func StreetLTE(v string) predicate.Address {
	return predicate.Address(sql.FieldLTE(FieldStreet, v))
}

// StreetContains applies the Contains predicate on the "street" field.
func StreetContains(v string) predicate.Address {
	return predicate.Address(sql.FieldContains(FieldStreet, v))
}

// StreetHasPrefix applies the HasPrefix predicate on the "street" field.
func StreetHasPrefix(v string) predicate.Address {
	return predicate.Address(sql.FieldHasPrefix(FieldStreet, v))
}

// StreetHasSuffix applies the HasSuffix predicate on the "street" field.
func StreetHasSuffix(v string) predicate.Address {
	return predicate.Address(sql.FieldHasSuffix(FieldStreet, v))
}

// StreetEqualFold applies the EqualFold predicate on the "street" field.
func StreetEqualFold(v string) predicate.Address {
	return predicate.Address(sql.FieldEqualFold(FieldStreet, v))
}

// StreetContainsFold applies the ContainsFold predicate on the "street" field.
func StreetContainsFold(v string) predicate.Address {
	return predicate.Address(sql.FieldContainsFold(FieldStreet, v))
}

// ZipEQ applies the EQ predicate on the "zip" field.
func ZipEQ(v string) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldZip, v))
}

// ZipNEQ applies the NEQ predicate on the "zip" field.
func ZipNEQ(v string) predicate.Address {
	return predicate.Address(sql.FieldNEQ(FieldZip, v))
}

// ZipIn applies the In predicate on the "zip" field.
func ZipIn(vs ...string) predicate.Address {
	return predicate.Address(sql.FieldIn(FieldZip, vs...))
}

// ZipNotIn applies the NotIn predicate on the "zip" field.
func ZipNotIn(vs ...string) predicate.Address {
	return predicate.Address(sql.FieldNotIn(FieldZip, vs...))
}

// ZipGT applies the GT predicate on the "zip" field.
func ZipGT(v string) predicate.Address {
	return predicate.Address(sql.FieldGT(FieldZip, v))
}

// ZipGTE applies the GTE predicate on the "zip" field.
func ZipGTE(v string) predicate.Address {
	return predicate.Address(sql.FieldGTE(FieldZip, v))
}

// ZipLT applies the LT predicate on the "zip" field.
func ZipLT(v string) predicate.Address {
	return predicate.Address(sql.FieldLT(FieldZip, v))
}

// ZipLTE applies the LTE predicate on the "zip" field.
func ZipLTE(v string) predicate.Address {
	return predicate.Address(sql.FieldLTE(FieldZip, v))
}

// ZipContains applies the Contains predicate on the "zip" field.
func ZipContains(v string) predicate.Address {
	return predicate.Address(sql.FieldContains(FieldZip, v))
}

// ZipHasPrefix applies the HasPrefix predicate on the "zip" field.
func ZipHasPrefix(v string) predicate.Address {
	return predicate.Address(sql.FieldHasPrefix(FieldZip, v))
}

// ZipHasSuffix applies the HasSuffix predicate on the "zip" field.
func ZipHasSuffix(v string) predicate.Address {
	return predicate.Address(sql.FieldHasSuffix(FieldZip, v))
}

// ZipEqualFold applies the EqualFold predicate on the "zip" field.
func ZipEqualFold(v string) predicate.Address {
	return predicate.Address(sql.FieldEqualFold(FieldZip, v))
}

// ZipContainsFold applies the ContainsFold predicate on the "zip" field.
func ZipContainsFold(v string) predicate.Address {
	return predicate.Address(sql.FieldContainsFold(FieldZip, v))
}

// NumberEQ applies the EQ predicate on the "number" field.
func NumberEQ(v string) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldNumber, v))
}

// NumberNEQ applies the NEQ predicate on the "number" field.
func NumberNEQ(v string) predicate.Address {
	return predicate.Address(sql.FieldNEQ(FieldNumber, v))
}

// NumberIn applies the In predicate on the "number" field.
func NumberIn(vs ...string) predicate.Address {
	return predicate.Address(sql.FieldIn(FieldNumber, vs...))
}

// NumberNotIn applies the NotIn predicate on the "number" field.
func NumberNotIn(vs ...string) predicate.Address {
	return predicate.Address(sql.FieldNotIn(FieldNumber, vs...))
}

// NumberGT applies the GT predicate on the "number" field.
func NumberGT(v string) predicate.Address {
	return predicate.Address(sql.FieldGT(FieldNumber, v))
}

// NumberGTE applies the GTE predicate on the "number" field.
func NumberGTE(v string) predicate.Address {
	return predicate.Address(sql.FieldGTE(FieldNumber, v))
}

// NumberLT applies the LT predicate on the "number" field.
func NumberLT(v string) predicate.Address {
	return predicate.Address(sql.FieldLT(FieldNumber, v))
}

// NumberLTE applies the LTE predicate on the "number" field.
func NumberLTE(v string) predicate.Address {
	return predicate.Address(sql.FieldLTE(FieldNumber, v))
}

// NumberContains applies the Contains predicate on the "number" field.
func NumberContains(v string) predicate.Address {
	return predicate.Address(sql.FieldContains(FieldNumber, v))
}

// NumberHasPrefix applies the HasPrefix predicate on the "number" field.
func NumberHasPrefix(v string) predicate.Address {
	return predicate.Address(sql.FieldHasPrefix(FieldNumber, v))
}

// NumberHasSuffix applies the HasSuffix predicate on the "number" field.
func NumberHasSuffix(v string) predicate.Address {
	return predicate.Address(sql.FieldHasSuffix(FieldNumber, v))
}

// NumberEqualFold applies the EqualFold predicate on the "number" field.
func NumberEqualFold(v string) predicate.Address {
	return predicate.Address(sql.FieldEqualFold(FieldNumber, v))
}

// NumberContainsFold applies the ContainsFold predicate on the "number" field.
func NumberContainsFold(v string) predicate.Address {
	return predicate.Address(sql.FieldContainsFold(FieldNumber, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Address) predicate.Address {
	return predicate.Address(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Address) predicate.Address {
	return predicate.Address(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Address) predicate.Address {
	return predicate.Address(sql.NotPredicates(p))
}
