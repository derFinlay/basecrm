// +build tools
// +build tools
// +build tools
// +build tools
// +build tools
// +build tools
// +build tools
// Code generated by ent, DO NOT EDIT.

package ent

import (
	"time"

	"github.com/derfinlay/basecrm/ent/address"
	"github.com/derfinlay/basecrm/ent/customer"
	"github.com/derfinlay/basecrm/ent/schema"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	addressFields := schema.Address{}.Fields()
	_ = addressFields
	// addressDescCity is the schema descriptor for city field.
	addressDescCity := addressFields[0].Descriptor()
	// address.CityValidator is a validator for the "city" field. It is called by the builders before save.
	address.CityValidator = addressDescCity.Validators[0].(func(string) error)
	// addressDescStreet is the schema descriptor for street field.
	addressDescStreet := addressFields[1].Descriptor()
	// address.StreetValidator is a validator for the "street" field. It is called by the builders before save.
	address.StreetValidator = addressDescStreet.Validators[0].(func(string) error)
	// addressDescZip is the schema descriptor for zip field.
	addressDescZip := addressFields[2].Descriptor()
	// address.ZipValidator is a validator for the "zip" field. It is called by the builders before save.
	address.ZipValidator = addressDescZip.Validators[0].(func(string) error)
	// addressDescNumber is the schema descriptor for number field.
	addressDescNumber := addressFields[3].Descriptor()
	// address.NumberValidator is a validator for the "number" field. It is called by the builders before save.
	address.NumberValidator = addressDescNumber.Validators[0].(func(string) error)
	customerFields := schema.Customer{}.Fields()
	_ = customerFields
	// customerDescName is the schema descriptor for name field.
	customerDescName := customerFields[0].Descriptor()
	// customer.NameValidator is a validator for the "name" field. It is called by the builders before save.
	customer.NameValidator = func() func(string) error {
		validators := customerDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// customerDescEmail is the schema descriptor for email field.
	customerDescEmail := customerFields[1].Descriptor()
	// customer.EmailValidator is a validator for the "email" field. It is called by the builders before save.
	customer.EmailValidator = customerDescEmail.Validators[0].(func(string) error)
	// customerDescPassword is the schema descriptor for password field.
	customerDescPassword := customerFields[2].Descriptor()
	// customer.PasswordValidator is a validator for the "password" field. It is called by the builders before save.
	customer.PasswordValidator = customerDescPassword.Validators[0].(func(string) error)
	// customerDescCreatedAt is the schema descriptor for created_at field.
	customerDescCreatedAt := customerFields[3].Descriptor()
	// customer.DefaultCreatedAt holds the default value on creation for the created_at field.
	customer.DefaultCreatedAt = customerDescCreatedAt.Default.(func() time.Time)
	// customerDescUpdatedAt is the schema descriptor for updated_at field.
	customerDescUpdatedAt := customerFields[4].Descriptor()
	// customer.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	customer.DefaultUpdatedAt = customerDescUpdatedAt.Default.(func() time.Time)
	// customer.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	customer.UpdateDefaultUpdatedAt = customerDescUpdatedAt.UpdateDefault.(func() time.Time)
}
