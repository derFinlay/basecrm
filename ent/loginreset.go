// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/derfinlay/basecrm/ent/login"
	"github.com/derfinlay/basecrm/ent/loginreset"
)

// LoginReset is the model entity for the LoginReset schema.
type LoginReset struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Token holds the value of the "token" field.
	Token string `json:"token,omitempty"`
	// Active holds the value of the "active" field.
	Active bool `json:"active,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the LoginResetQuery when eager-loading is set.
	Edges              LoginResetEdges `json:"edges"`
	login_login_resets *int
	selectValues       sql.SelectValues
}

// LoginResetEdges holds the relations/edges for other nodes in the graph.
type LoginResetEdges struct {
	// Notes holds the value of the notes edge.
	Notes []*Note `json:"notes,omitempty"`
	// Login holds the value of the login edge.
	Login *Login `json:"login,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// NotesOrErr returns the Notes value or an error if the edge
// was not loaded in eager-loading.
func (e LoginResetEdges) NotesOrErr() ([]*Note, error) {
	if e.loadedTypes[0] {
		return e.Notes, nil
	}
	return nil, &NotLoadedError{edge: "notes"}
}

// LoginOrErr returns the Login value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e LoginResetEdges) LoginOrErr() (*Login, error) {
	if e.loadedTypes[1] {
		if e.Login == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: login.Label}
		}
		return e.Login, nil
	}
	return nil, &NotLoadedError{edge: "login"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*LoginReset) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case loginreset.FieldActive:
			values[i] = new(sql.NullBool)
		case loginreset.FieldID:
			values[i] = new(sql.NullInt64)
		case loginreset.FieldToken:
			values[i] = new(sql.NullString)
		case loginreset.FieldCreatedAt, loginreset.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case loginreset.ForeignKeys[0]: // login_login_resets
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the LoginReset fields.
func (lr *LoginReset) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case loginreset.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			lr.ID = int(value.Int64)
		case loginreset.FieldToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field token", values[i])
			} else if value.Valid {
				lr.Token = value.String
			}
		case loginreset.FieldActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field active", values[i])
			} else if value.Valid {
				lr.Active = value.Bool
			}
		case loginreset.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				lr.CreatedAt = value.Time
			}
		case loginreset.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				lr.UpdatedAt = value.Time
			}
		case loginreset.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field login_login_resets", value)
			} else if value.Valid {
				lr.login_login_resets = new(int)
				*lr.login_login_resets = int(value.Int64)
			}
		default:
			lr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the LoginReset.
// This includes values selected through modifiers, order, etc.
func (lr *LoginReset) Value(name string) (ent.Value, error) {
	return lr.selectValues.Get(name)
}

// QueryNotes queries the "notes" edge of the LoginReset entity.
func (lr *LoginReset) QueryNotes() *NoteQuery {
	return NewLoginResetClient(lr.config).QueryNotes(lr)
}

// QueryLogin queries the "login" edge of the LoginReset entity.
func (lr *LoginReset) QueryLogin() *LoginQuery {
	return NewLoginResetClient(lr.config).QueryLogin(lr)
}

// Update returns a builder for updating this LoginReset.
// Note that you need to call LoginReset.Unwrap() before calling this method if this LoginReset
// was returned from a transaction, and the transaction was committed or rolled back.
func (lr *LoginReset) Update() *LoginResetUpdateOne {
	return NewLoginResetClient(lr.config).UpdateOne(lr)
}

// Unwrap unwraps the LoginReset entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (lr *LoginReset) Unwrap() *LoginReset {
	_tx, ok := lr.config.driver.(*txDriver)
	if !ok {
		panic("ent: LoginReset is not a transactional entity")
	}
	lr.config.driver = _tx.drv
	return lr
}

// String implements the fmt.Stringer.
func (lr *LoginReset) String() string {
	var builder strings.Builder
	builder.WriteString("LoginReset(")
	builder.WriteString(fmt.Sprintf("id=%v, ", lr.ID))
	builder.WriteString("token=")
	builder.WriteString(lr.Token)
	builder.WriteString(", ")
	builder.WriteString("active=")
	builder.WriteString(fmt.Sprintf("%v", lr.Active))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(lr.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(lr.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// LoginResets is a parsable slice of LoginReset.
type LoginResets []*LoginReset
