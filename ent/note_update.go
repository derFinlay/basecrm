// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/derfinlay/basecrm/ent/billingaddress"
	"github.com/derfinlay/basecrm/ent/customer"
	"github.com/derfinlay/basecrm/ent/deliveryaddress"
	"github.com/derfinlay/basecrm/ent/login"
	"github.com/derfinlay/basecrm/ent/loginreset"
	"github.com/derfinlay/basecrm/ent/note"
	"github.com/derfinlay/basecrm/ent/order"
	"github.com/derfinlay/basecrm/ent/position"
	"github.com/derfinlay/basecrm/ent/predicate"
	"github.com/derfinlay/basecrm/ent/product"
	"github.com/derfinlay/basecrm/ent/role"
	"github.com/derfinlay/basecrm/ent/tel"
	"github.com/derfinlay/basecrm/ent/user"
)

// NoteUpdate is the builder for updating Note entities.
type NoteUpdate struct {
	config
	hooks    []Hook
	mutation *NoteMutation
}

// Where appends a list predicates to the NoteUpdate builder.
func (nu *NoteUpdate) Where(ps ...predicate.Note) *NoteUpdate {
	nu.mutation.Where(ps...)
	return nu
}

// SetTitle sets the "title" field.
func (nu *NoteUpdate) SetTitle(s string) *NoteUpdate {
	nu.mutation.SetTitle(s)
	return nu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (nu *NoteUpdate) SetNillableTitle(s *string) *NoteUpdate {
	if s != nil {
		nu.SetTitle(*s)
	}
	return nu
}

// SetContent sets the "content" field.
func (nu *NoteUpdate) SetContent(s string) *NoteUpdate {
	nu.mutation.SetContent(s)
	return nu
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (nu *NoteUpdate) SetNillableContent(s *string) *NoteUpdate {
	if s != nil {
		nu.SetContent(*s)
	}
	return nu
}

// SetUpdatedAt sets the "updated_at" field.
func (nu *NoteUpdate) SetUpdatedAt(t time.Time) *NoteUpdate {
	nu.mutation.SetUpdatedAt(t)
	return nu
}

// SetBillingAddressID sets the "billing_address" edge to the BillingAddress entity by ID.
func (nu *NoteUpdate) SetBillingAddressID(id int) *NoteUpdate {
	nu.mutation.SetBillingAddressID(id)
	return nu
}

// SetNillableBillingAddressID sets the "billing_address" edge to the BillingAddress entity by ID if the given value is not nil.
func (nu *NoteUpdate) SetNillableBillingAddressID(id *int) *NoteUpdate {
	if id != nil {
		nu = nu.SetBillingAddressID(*id)
	}
	return nu
}

// SetBillingAddress sets the "billing_address" edge to the BillingAddress entity.
func (nu *NoteUpdate) SetBillingAddress(b *BillingAddress) *NoteUpdate {
	return nu.SetBillingAddressID(b.ID)
}

// SetCustomerID sets the "customer" edge to the Customer entity by ID.
func (nu *NoteUpdate) SetCustomerID(id int) *NoteUpdate {
	nu.mutation.SetCustomerID(id)
	return nu
}

// SetNillableCustomerID sets the "customer" edge to the Customer entity by ID if the given value is not nil.
func (nu *NoteUpdate) SetNillableCustomerID(id *int) *NoteUpdate {
	if id != nil {
		nu = nu.SetCustomerID(*id)
	}
	return nu
}

// SetCustomer sets the "customer" edge to the Customer entity.
func (nu *NoteUpdate) SetCustomer(c *Customer) *NoteUpdate {
	return nu.SetCustomerID(c.ID)
}

// SetDeliveryAddressID sets the "delivery_address" edge to the DeliveryAddress entity by ID.
func (nu *NoteUpdate) SetDeliveryAddressID(id int) *NoteUpdate {
	nu.mutation.SetDeliveryAddressID(id)
	return nu
}

// SetNillableDeliveryAddressID sets the "delivery_address" edge to the DeliveryAddress entity by ID if the given value is not nil.
func (nu *NoteUpdate) SetNillableDeliveryAddressID(id *int) *NoteUpdate {
	if id != nil {
		nu = nu.SetDeliveryAddressID(*id)
	}
	return nu
}

// SetDeliveryAddress sets the "delivery_address" edge to the DeliveryAddress entity.
func (nu *NoteUpdate) SetDeliveryAddress(d *DeliveryAddress) *NoteUpdate {
	return nu.SetDeliveryAddressID(d.ID)
}

// SetLoginResetID sets the "login_reset" edge to the LoginReset entity by ID.
func (nu *NoteUpdate) SetLoginResetID(id int) *NoteUpdate {
	nu.mutation.SetLoginResetID(id)
	return nu
}

// SetNillableLoginResetID sets the "login_reset" edge to the LoginReset entity by ID if the given value is not nil.
func (nu *NoteUpdate) SetNillableLoginResetID(id *int) *NoteUpdate {
	if id != nil {
		nu = nu.SetLoginResetID(*id)
	}
	return nu
}

// SetLoginReset sets the "login_reset" edge to the LoginReset entity.
func (nu *NoteUpdate) SetLoginReset(l *LoginReset) *NoteUpdate {
	return nu.SetLoginResetID(l.ID)
}

// SetLoginID sets the "login" edge to the Login entity by ID.
func (nu *NoteUpdate) SetLoginID(id int) *NoteUpdate {
	nu.mutation.SetLoginID(id)
	return nu
}

// SetNillableLoginID sets the "login" edge to the Login entity by ID if the given value is not nil.
func (nu *NoteUpdate) SetNillableLoginID(id *int) *NoteUpdate {
	if id != nil {
		nu = nu.SetLoginID(*id)
	}
	return nu
}

// SetLogin sets the "login" edge to the Login entity.
func (nu *NoteUpdate) SetLogin(l *Login) *NoteUpdate {
	return nu.SetLoginID(l.ID)
}

// SetOrderID sets the "order" edge to the Order entity by ID.
func (nu *NoteUpdate) SetOrderID(id int) *NoteUpdate {
	nu.mutation.SetOrderID(id)
	return nu
}

// SetNillableOrderID sets the "order" edge to the Order entity by ID if the given value is not nil.
func (nu *NoteUpdate) SetNillableOrderID(id *int) *NoteUpdate {
	if id != nil {
		nu = nu.SetOrderID(*id)
	}
	return nu
}

// SetOrder sets the "order" edge to the Order entity.
func (nu *NoteUpdate) SetOrder(o *Order) *NoteUpdate {
	return nu.SetOrderID(o.ID)
}

// SetPositionID sets the "position" edge to the Position entity by ID.
func (nu *NoteUpdate) SetPositionID(id int) *NoteUpdate {
	nu.mutation.SetPositionID(id)
	return nu
}

// SetNillablePositionID sets the "position" edge to the Position entity by ID if the given value is not nil.
func (nu *NoteUpdate) SetNillablePositionID(id *int) *NoteUpdate {
	if id != nil {
		nu = nu.SetPositionID(*id)
	}
	return nu
}

// SetPosition sets the "position" edge to the Position entity.
func (nu *NoteUpdate) SetPosition(p *Position) *NoteUpdate {
	return nu.SetPositionID(p.ID)
}

// SetProductID sets the "product" edge to the Product entity by ID.
func (nu *NoteUpdate) SetProductID(id int) *NoteUpdate {
	nu.mutation.SetProductID(id)
	return nu
}

// SetNillableProductID sets the "product" edge to the Product entity by ID if the given value is not nil.
func (nu *NoteUpdate) SetNillableProductID(id *int) *NoteUpdate {
	if id != nil {
		nu = nu.SetProductID(*id)
	}
	return nu
}

// SetProduct sets the "product" edge to the Product entity.
func (nu *NoteUpdate) SetProduct(p *Product) *NoteUpdate {
	return nu.SetProductID(p.ID)
}

// SetRoleID sets the "role" edge to the Role entity by ID.
func (nu *NoteUpdate) SetRoleID(id int) *NoteUpdate {
	nu.mutation.SetRoleID(id)
	return nu
}

// SetNillableRoleID sets the "role" edge to the Role entity by ID if the given value is not nil.
func (nu *NoteUpdate) SetNillableRoleID(id *int) *NoteUpdate {
	if id != nil {
		nu = nu.SetRoleID(*id)
	}
	return nu
}

// SetRole sets the "role" edge to the Role entity.
func (nu *NoteUpdate) SetRole(r *Role) *NoteUpdate {
	return nu.SetRoleID(r.ID)
}

// SetTelID sets the "tel" edge to the Tel entity by ID.
func (nu *NoteUpdate) SetTelID(id int) *NoteUpdate {
	nu.mutation.SetTelID(id)
	return nu
}

// SetNillableTelID sets the "tel" edge to the Tel entity by ID if the given value is not nil.
func (nu *NoteUpdate) SetNillableTelID(id *int) *NoteUpdate {
	if id != nil {
		nu = nu.SetTelID(*id)
	}
	return nu
}

// SetTel sets the "tel" edge to the Tel entity.
func (nu *NoteUpdate) SetTel(t *Tel) *NoteUpdate {
	return nu.SetTelID(t.ID)
}

// SetCreatedByID sets the "created_by" edge to the User entity by ID.
func (nu *NoteUpdate) SetCreatedByID(id int) *NoteUpdate {
	nu.mutation.SetCreatedByID(id)
	return nu
}

// SetNillableCreatedByID sets the "created_by" edge to the User entity by ID if the given value is not nil.
func (nu *NoteUpdate) SetNillableCreatedByID(id *int) *NoteUpdate {
	if id != nil {
		nu = nu.SetCreatedByID(*id)
	}
	return nu
}

// SetCreatedBy sets the "created_by" edge to the User entity.
func (nu *NoteUpdate) SetCreatedBy(u *User) *NoteUpdate {
	return nu.SetCreatedByID(u.ID)
}

// Mutation returns the NoteMutation object of the builder.
func (nu *NoteUpdate) Mutation() *NoteMutation {
	return nu.mutation
}

// ClearBillingAddress clears the "billing_address" edge to the BillingAddress entity.
func (nu *NoteUpdate) ClearBillingAddress() *NoteUpdate {
	nu.mutation.ClearBillingAddress()
	return nu
}

// ClearCustomer clears the "customer" edge to the Customer entity.
func (nu *NoteUpdate) ClearCustomer() *NoteUpdate {
	nu.mutation.ClearCustomer()
	return nu
}

// ClearDeliveryAddress clears the "delivery_address" edge to the DeliveryAddress entity.
func (nu *NoteUpdate) ClearDeliveryAddress() *NoteUpdate {
	nu.mutation.ClearDeliveryAddress()
	return nu
}

// ClearLoginReset clears the "login_reset" edge to the LoginReset entity.
func (nu *NoteUpdate) ClearLoginReset() *NoteUpdate {
	nu.mutation.ClearLoginReset()
	return nu
}

// ClearLogin clears the "login" edge to the Login entity.
func (nu *NoteUpdate) ClearLogin() *NoteUpdate {
	nu.mutation.ClearLogin()
	return nu
}

// ClearOrder clears the "order" edge to the Order entity.
func (nu *NoteUpdate) ClearOrder() *NoteUpdate {
	nu.mutation.ClearOrder()
	return nu
}

// ClearPosition clears the "position" edge to the Position entity.
func (nu *NoteUpdate) ClearPosition() *NoteUpdate {
	nu.mutation.ClearPosition()
	return nu
}

// ClearProduct clears the "product" edge to the Product entity.
func (nu *NoteUpdate) ClearProduct() *NoteUpdate {
	nu.mutation.ClearProduct()
	return nu
}

// ClearRole clears the "role" edge to the Role entity.
func (nu *NoteUpdate) ClearRole() *NoteUpdate {
	nu.mutation.ClearRole()
	return nu
}

// ClearTel clears the "tel" edge to the Tel entity.
func (nu *NoteUpdate) ClearTel() *NoteUpdate {
	nu.mutation.ClearTel()
	return nu
}

// ClearCreatedBy clears the "created_by" edge to the User entity.
func (nu *NoteUpdate) ClearCreatedBy() *NoteUpdate {
	nu.mutation.ClearCreatedBy()
	return nu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (nu *NoteUpdate) Save(ctx context.Context) (int, error) {
	nu.defaults()
	return withHooks(ctx, nu.sqlSave, nu.mutation, nu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (nu *NoteUpdate) SaveX(ctx context.Context) int {
	affected, err := nu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (nu *NoteUpdate) Exec(ctx context.Context) error {
	_, err := nu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nu *NoteUpdate) ExecX(ctx context.Context) {
	if err := nu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (nu *NoteUpdate) defaults() {
	if _, ok := nu.mutation.UpdatedAt(); !ok {
		v := note.UpdateDefaultUpdatedAt()
		nu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nu *NoteUpdate) check() error {
	if v, ok := nu.mutation.Title(); ok {
		if err := note.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Note.title": %w`, err)}
		}
	}
	if v, ok := nu.mutation.Content(); ok {
		if err := note.ContentValidator(v); err != nil {
			return &ValidationError{Name: "content", err: fmt.Errorf(`ent: validator failed for field "Note.content": %w`, err)}
		}
	}
	return nil
}

func (nu *NoteUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := nu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(note.Table, note.Columns, sqlgraph.NewFieldSpec(note.FieldID, field.TypeInt))
	if ps := nu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nu.mutation.Title(); ok {
		_spec.SetField(note.FieldTitle, field.TypeString, value)
	}
	if value, ok := nu.mutation.Content(); ok {
		_spec.SetField(note.FieldContent, field.TypeString, value)
	}
	if value, ok := nu.mutation.UpdatedAt(); ok {
		_spec.SetField(note.FieldUpdatedAt, field.TypeTime, value)
	}
	if nu.mutation.BillingAddressCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   note.BillingAddressTable,
			Columns: []string{note.BillingAddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billingaddress.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.BillingAddressIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   note.BillingAddressTable,
			Columns: []string{note.BillingAddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billingaddress.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nu.mutation.CustomerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   note.CustomerTable,
			Columns: []string{note.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   note.CustomerTable,
			Columns: []string{note.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nu.mutation.DeliveryAddressCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   note.DeliveryAddressTable,
			Columns: []string{note.DeliveryAddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryaddress.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.DeliveryAddressIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   note.DeliveryAddressTable,
			Columns: []string{note.DeliveryAddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryaddress.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nu.mutation.LoginResetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   note.LoginResetTable,
			Columns: []string{note.LoginResetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(loginreset.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.LoginResetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   note.LoginResetTable,
			Columns: []string{note.LoginResetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(loginreset.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nu.mutation.LoginCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   note.LoginTable,
			Columns: []string{note.LoginColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(login.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.LoginIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   note.LoginTable,
			Columns: []string{note.LoginColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(login.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nu.mutation.OrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   note.OrderTable,
			Columns: []string{note.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.OrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   note.OrderTable,
			Columns: []string{note.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nu.mutation.PositionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   note.PositionTable,
			Columns: []string{note.PositionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(position.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.PositionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   note.PositionTable,
			Columns: []string{note.PositionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(position.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nu.mutation.ProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   note.ProductTable,
			Columns: []string{note.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   note.ProductTable,
			Columns: []string{note.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nu.mutation.RoleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   note.RoleTable,
			Columns: []string{note.RoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.RoleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   note.RoleTable,
			Columns: []string{note.RoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nu.mutation.TelCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   note.TelTable,
			Columns: []string{note.TelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tel.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.TelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   note.TelTable,
			Columns: []string{note.TelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tel.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nu.mutation.CreatedByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   note.CreatedByTable,
			Columns: []string{note.CreatedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.CreatedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   note.CreatedByTable,
			Columns: []string{note.CreatedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, nu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{note.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	nu.mutation.done = true
	return n, nil
}

// NoteUpdateOne is the builder for updating a single Note entity.
type NoteUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *NoteMutation
}

// SetTitle sets the "title" field.
func (nuo *NoteUpdateOne) SetTitle(s string) *NoteUpdateOne {
	nuo.mutation.SetTitle(s)
	return nuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (nuo *NoteUpdateOne) SetNillableTitle(s *string) *NoteUpdateOne {
	if s != nil {
		nuo.SetTitle(*s)
	}
	return nuo
}

// SetContent sets the "content" field.
func (nuo *NoteUpdateOne) SetContent(s string) *NoteUpdateOne {
	nuo.mutation.SetContent(s)
	return nuo
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (nuo *NoteUpdateOne) SetNillableContent(s *string) *NoteUpdateOne {
	if s != nil {
		nuo.SetContent(*s)
	}
	return nuo
}

// SetUpdatedAt sets the "updated_at" field.
func (nuo *NoteUpdateOne) SetUpdatedAt(t time.Time) *NoteUpdateOne {
	nuo.mutation.SetUpdatedAt(t)
	return nuo
}

// SetBillingAddressID sets the "billing_address" edge to the BillingAddress entity by ID.
func (nuo *NoteUpdateOne) SetBillingAddressID(id int) *NoteUpdateOne {
	nuo.mutation.SetBillingAddressID(id)
	return nuo
}

// SetNillableBillingAddressID sets the "billing_address" edge to the BillingAddress entity by ID if the given value is not nil.
func (nuo *NoteUpdateOne) SetNillableBillingAddressID(id *int) *NoteUpdateOne {
	if id != nil {
		nuo = nuo.SetBillingAddressID(*id)
	}
	return nuo
}

// SetBillingAddress sets the "billing_address" edge to the BillingAddress entity.
func (nuo *NoteUpdateOne) SetBillingAddress(b *BillingAddress) *NoteUpdateOne {
	return nuo.SetBillingAddressID(b.ID)
}

// SetCustomerID sets the "customer" edge to the Customer entity by ID.
func (nuo *NoteUpdateOne) SetCustomerID(id int) *NoteUpdateOne {
	nuo.mutation.SetCustomerID(id)
	return nuo
}

// SetNillableCustomerID sets the "customer" edge to the Customer entity by ID if the given value is not nil.
func (nuo *NoteUpdateOne) SetNillableCustomerID(id *int) *NoteUpdateOne {
	if id != nil {
		nuo = nuo.SetCustomerID(*id)
	}
	return nuo
}

// SetCustomer sets the "customer" edge to the Customer entity.
func (nuo *NoteUpdateOne) SetCustomer(c *Customer) *NoteUpdateOne {
	return nuo.SetCustomerID(c.ID)
}

// SetDeliveryAddressID sets the "delivery_address" edge to the DeliveryAddress entity by ID.
func (nuo *NoteUpdateOne) SetDeliveryAddressID(id int) *NoteUpdateOne {
	nuo.mutation.SetDeliveryAddressID(id)
	return nuo
}

// SetNillableDeliveryAddressID sets the "delivery_address" edge to the DeliveryAddress entity by ID if the given value is not nil.
func (nuo *NoteUpdateOne) SetNillableDeliveryAddressID(id *int) *NoteUpdateOne {
	if id != nil {
		nuo = nuo.SetDeliveryAddressID(*id)
	}
	return nuo
}

// SetDeliveryAddress sets the "delivery_address" edge to the DeliveryAddress entity.
func (nuo *NoteUpdateOne) SetDeliveryAddress(d *DeliveryAddress) *NoteUpdateOne {
	return nuo.SetDeliveryAddressID(d.ID)
}

// SetLoginResetID sets the "login_reset" edge to the LoginReset entity by ID.
func (nuo *NoteUpdateOne) SetLoginResetID(id int) *NoteUpdateOne {
	nuo.mutation.SetLoginResetID(id)
	return nuo
}

// SetNillableLoginResetID sets the "login_reset" edge to the LoginReset entity by ID if the given value is not nil.
func (nuo *NoteUpdateOne) SetNillableLoginResetID(id *int) *NoteUpdateOne {
	if id != nil {
		nuo = nuo.SetLoginResetID(*id)
	}
	return nuo
}

// SetLoginReset sets the "login_reset" edge to the LoginReset entity.
func (nuo *NoteUpdateOne) SetLoginReset(l *LoginReset) *NoteUpdateOne {
	return nuo.SetLoginResetID(l.ID)
}

// SetLoginID sets the "login" edge to the Login entity by ID.
func (nuo *NoteUpdateOne) SetLoginID(id int) *NoteUpdateOne {
	nuo.mutation.SetLoginID(id)
	return nuo
}

// SetNillableLoginID sets the "login" edge to the Login entity by ID if the given value is not nil.
func (nuo *NoteUpdateOne) SetNillableLoginID(id *int) *NoteUpdateOne {
	if id != nil {
		nuo = nuo.SetLoginID(*id)
	}
	return nuo
}

// SetLogin sets the "login" edge to the Login entity.
func (nuo *NoteUpdateOne) SetLogin(l *Login) *NoteUpdateOne {
	return nuo.SetLoginID(l.ID)
}

// SetOrderID sets the "order" edge to the Order entity by ID.
func (nuo *NoteUpdateOne) SetOrderID(id int) *NoteUpdateOne {
	nuo.mutation.SetOrderID(id)
	return nuo
}

// SetNillableOrderID sets the "order" edge to the Order entity by ID if the given value is not nil.
func (nuo *NoteUpdateOne) SetNillableOrderID(id *int) *NoteUpdateOne {
	if id != nil {
		nuo = nuo.SetOrderID(*id)
	}
	return nuo
}

// SetOrder sets the "order" edge to the Order entity.
func (nuo *NoteUpdateOne) SetOrder(o *Order) *NoteUpdateOne {
	return nuo.SetOrderID(o.ID)
}

// SetPositionID sets the "position" edge to the Position entity by ID.
func (nuo *NoteUpdateOne) SetPositionID(id int) *NoteUpdateOne {
	nuo.mutation.SetPositionID(id)
	return nuo
}

// SetNillablePositionID sets the "position" edge to the Position entity by ID if the given value is not nil.
func (nuo *NoteUpdateOne) SetNillablePositionID(id *int) *NoteUpdateOne {
	if id != nil {
		nuo = nuo.SetPositionID(*id)
	}
	return nuo
}

// SetPosition sets the "position" edge to the Position entity.
func (nuo *NoteUpdateOne) SetPosition(p *Position) *NoteUpdateOne {
	return nuo.SetPositionID(p.ID)
}

// SetProductID sets the "product" edge to the Product entity by ID.
func (nuo *NoteUpdateOne) SetProductID(id int) *NoteUpdateOne {
	nuo.mutation.SetProductID(id)
	return nuo
}

// SetNillableProductID sets the "product" edge to the Product entity by ID if the given value is not nil.
func (nuo *NoteUpdateOne) SetNillableProductID(id *int) *NoteUpdateOne {
	if id != nil {
		nuo = nuo.SetProductID(*id)
	}
	return nuo
}

// SetProduct sets the "product" edge to the Product entity.
func (nuo *NoteUpdateOne) SetProduct(p *Product) *NoteUpdateOne {
	return nuo.SetProductID(p.ID)
}

// SetRoleID sets the "role" edge to the Role entity by ID.
func (nuo *NoteUpdateOne) SetRoleID(id int) *NoteUpdateOne {
	nuo.mutation.SetRoleID(id)
	return nuo
}

// SetNillableRoleID sets the "role" edge to the Role entity by ID if the given value is not nil.
func (nuo *NoteUpdateOne) SetNillableRoleID(id *int) *NoteUpdateOne {
	if id != nil {
		nuo = nuo.SetRoleID(*id)
	}
	return nuo
}

// SetRole sets the "role" edge to the Role entity.
func (nuo *NoteUpdateOne) SetRole(r *Role) *NoteUpdateOne {
	return nuo.SetRoleID(r.ID)
}

// SetTelID sets the "tel" edge to the Tel entity by ID.
func (nuo *NoteUpdateOne) SetTelID(id int) *NoteUpdateOne {
	nuo.mutation.SetTelID(id)
	return nuo
}

// SetNillableTelID sets the "tel" edge to the Tel entity by ID if the given value is not nil.
func (nuo *NoteUpdateOne) SetNillableTelID(id *int) *NoteUpdateOne {
	if id != nil {
		nuo = nuo.SetTelID(*id)
	}
	return nuo
}

// SetTel sets the "tel" edge to the Tel entity.
func (nuo *NoteUpdateOne) SetTel(t *Tel) *NoteUpdateOne {
	return nuo.SetTelID(t.ID)
}

// SetCreatedByID sets the "created_by" edge to the User entity by ID.
func (nuo *NoteUpdateOne) SetCreatedByID(id int) *NoteUpdateOne {
	nuo.mutation.SetCreatedByID(id)
	return nuo
}

// SetNillableCreatedByID sets the "created_by" edge to the User entity by ID if the given value is not nil.
func (nuo *NoteUpdateOne) SetNillableCreatedByID(id *int) *NoteUpdateOne {
	if id != nil {
		nuo = nuo.SetCreatedByID(*id)
	}
	return nuo
}

// SetCreatedBy sets the "created_by" edge to the User entity.
func (nuo *NoteUpdateOne) SetCreatedBy(u *User) *NoteUpdateOne {
	return nuo.SetCreatedByID(u.ID)
}

// Mutation returns the NoteMutation object of the builder.
func (nuo *NoteUpdateOne) Mutation() *NoteMutation {
	return nuo.mutation
}

// ClearBillingAddress clears the "billing_address" edge to the BillingAddress entity.
func (nuo *NoteUpdateOne) ClearBillingAddress() *NoteUpdateOne {
	nuo.mutation.ClearBillingAddress()
	return nuo
}

// ClearCustomer clears the "customer" edge to the Customer entity.
func (nuo *NoteUpdateOne) ClearCustomer() *NoteUpdateOne {
	nuo.mutation.ClearCustomer()
	return nuo
}

// ClearDeliveryAddress clears the "delivery_address" edge to the DeliveryAddress entity.
func (nuo *NoteUpdateOne) ClearDeliveryAddress() *NoteUpdateOne {
	nuo.mutation.ClearDeliveryAddress()
	return nuo
}

// ClearLoginReset clears the "login_reset" edge to the LoginReset entity.
func (nuo *NoteUpdateOne) ClearLoginReset() *NoteUpdateOne {
	nuo.mutation.ClearLoginReset()
	return nuo
}

// ClearLogin clears the "login" edge to the Login entity.
func (nuo *NoteUpdateOne) ClearLogin() *NoteUpdateOne {
	nuo.mutation.ClearLogin()
	return nuo
}

// ClearOrder clears the "order" edge to the Order entity.
func (nuo *NoteUpdateOne) ClearOrder() *NoteUpdateOne {
	nuo.mutation.ClearOrder()
	return nuo
}

// ClearPosition clears the "position" edge to the Position entity.
func (nuo *NoteUpdateOne) ClearPosition() *NoteUpdateOne {
	nuo.mutation.ClearPosition()
	return nuo
}

// ClearProduct clears the "product" edge to the Product entity.
func (nuo *NoteUpdateOne) ClearProduct() *NoteUpdateOne {
	nuo.mutation.ClearProduct()
	return nuo
}

// ClearRole clears the "role" edge to the Role entity.
func (nuo *NoteUpdateOne) ClearRole() *NoteUpdateOne {
	nuo.mutation.ClearRole()
	return nuo
}

// ClearTel clears the "tel" edge to the Tel entity.
func (nuo *NoteUpdateOne) ClearTel() *NoteUpdateOne {
	nuo.mutation.ClearTel()
	return nuo
}

// ClearCreatedBy clears the "created_by" edge to the User entity.
func (nuo *NoteUpdateOne) ClearCreatedBy() *NoteUpdateOne {
	nuo.mutation.ClearCreatedBy()
	return nuo
}

// Where appends a list predicates to the NoteUpdate builder.
func (nuo *NoteUpdateOne) Where(ps ...predicate.Note) *NoteUpdateOne {
	nuo.mutation.Where(ps...)
	return nuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (nuo *NoteUpdateOne) Select(field string, fields ...string) *NoteUpdateOne {
	nuo.fields = append([]string{field}, fields...)
	return nuo
}

// Save executes the query and returns the updated Note entity.
func (nuo *NoteUpdateOne) Save(ctx context.Context) (*Note, error) {
	nuo.defaults()
	return withHooks(ctx, nuo.sqlSave, nuo.mutation, nuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (nuo *NoteUpdateOne) SaveX(ctx context.Context) *Note {
	node, err := nuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (nuo *NoteUpdateOne) Exec(ctx context.Context) error {
	_, err := nuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nuo *NoteUpdateOne) ExecX(ctx context.Context) {
	if err := nuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (nuo *NoteUpdateOne) defaults() {
	if _, ok := nuo.mutation.UpdatedAt(); !ok {
		v := note.UpdateDefaultUpdatedAt()
		nuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nuo *NoteUpdateOne) check() error {
	if v, ok := nuo.mutation.Title(); ok {
		if err := note.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Note.title": %w`, err)}
		}
	}
	if v, ok := nuo.mutation.Content(); ok {
		if err := note.ContentValidator(v); err != nil {
			return &ValidationError{Name: "content", err: fmt.Errorf(`ent: validator failed for field "Note.content": %w`, err)}
		}
	}
	return nil
}

func (nuo *NoteUpdateOne) sqlSave(ctx context.Context) (_node *Note, err error) {
	if err := nuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(note.Table, note.Columns, sqlgraph.NewFieldSpec(note.FieldID, field.TypeInt))
	id, ok := nuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Note.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := nuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, note.FieldID)
		for _, f := range fields {
			if !note.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != note.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := nuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nuo.mutation.Title(); ok {
		_spec.SetField(note.FieldTitle, field.TypeString, value)
	}
	if value, ok := nuo.mutation.Content(); ok {
		_spec.SetField(note.FieldContent, field.TypeString, value)
	}
	if value, ok := nuo.mutation.UpdatedAt(); ok {
		_spec.SetField(note.FieldUpdatedAt, field.TypeTime, value)
	}
	if nuo.mutation.BillingAddressCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   note.BillingAddressTable,
			Columns: []string{note.BillingAddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billingaddress.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.BillingAddressIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   note.BillingAddressTable,
			Columns: []string{note.BillingAddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billingaddress.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nuo.mutation.CustomerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   note.CustomerTable,
			Columns: []string{note.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   note.CustomerTable,
			Columns: []string{note.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nuo.mutation.DeliveryAddressCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   note.DeliveryAddressTable,
			Columns: []string{note.DeliveryAddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryaddress.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.DeliveryAddressIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   note.DeliveryAddressTable,
			Columns: []string{note.DeliveryAddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryaddress.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nuo.mutation.LoginResetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   note.LoginResetTable,
			Columns: []string{note.LoginResetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(loginreset.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.LoginResetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   note.LoginResetTable,
			Columns: []string{note.LoginResetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(loginreset.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nuo.mutation.LoginCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   note.LoginTable,
			Columns: []string{note.LoginColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(login.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.LoginIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   note.LoginTable,
			Columns: []string{note.LoginColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(login.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nuo.mutation.OrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   note.OrderTable,
			Columns: []string{note.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.OrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   note.OrderTable,
			Columns: []string{note.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nuo.mutation.PositionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   note.PositionTable,
			Columns: []string{note.PositionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(position.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.PositionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   note.PositionTable,
			Columns: []string{note.PositionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(position.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nuo.mutation.ProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   note.ProductTable,
			Columns: []string{note.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   note.ProductTable,
			Columns: []string{note.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nuo.mutation.RoleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   note.RoleTable,
			Columns: []string{note.RoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.RoleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   note.RoleTable,
			Columns: []string{note.RoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nuo.mutation.TelCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   note.TelTable,
			Columns: []string{note.TelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tel.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.TelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   note.TelTable,
			Columns: []string{note.TelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tel.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nuo.mutation.CreatedByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   note.CreatedByTable,
			Columns: []string{note.CreatedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.CreatedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   note.CreatedByTable,
			Columns: []string{note.CreatedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Note{config: nuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, nuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{note.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	nuo.mutation.done = true
	return _node, nil
}
