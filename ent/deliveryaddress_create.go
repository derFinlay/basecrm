// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/derfinlay/basecrm/ent/customer"
	"github.com/derfinlay/basecrm/ent/deliveryaddress"
	"github.com/derfinlay/basecrm/ent/note"
	"github.com/derfinlay/basecrm/ent/tel"
)

// DeliveryAddressCreate is the builder for creating a DeliveryAddress entity.
type DeliveryAddressCreate struct {
	config
	mutation *DeliveryAddressMutation
	hooks    []Hook
}

// SetCity sets the "city" field.
func (dac *DeliveryAddressCreate) SetCity(s string) *DeliveryAddressCreate {
	dac.mutation.SetCity(s)
	return dac
}

// SetStreet sets the "street" field.
func (dac *DeliveryAddressCreate) SetStreet(s string) *DeliveryAddressCreate {
	dac.mutation.SetStreet(s)
	return dac
}

// SetZip sets the "zip" field.
func (dac *DeliveryAddressCreate) SetZip(s string) *DeliveryAddressCreate {
	dac.mutation.SetZip(s)
	return dac
}

// SetNumber sets the "number" field.
func (dac *DeliveryAddressCreate) SetNumber(s string) *DeliveryAddressCreate {
	dac.mutation.SetNumber(s)
	return dac
}

// SetCreatedAt sets the "created_at" field.
func (dac *DeliveryAddressCreate) SetCreatedAt(t time.Time) *DeliveryAddressCreate {
	dac.mutation.SetCreatedAt(t)
	return dac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (dac *DeliveryAddressCreate) SetNillableCreatedAt(t *time.Time) *DeliveryAddressCreate {
	if t != nil {
		dac.SetCreatedAt(*t)
	}
	return dac
}

// SetUpdatedAt sets the "updated_at" field.
func (dac *DeliveryAddressCreate) SetUpdatedAt(t time.Time) *DeliveryAddressCreate {
	dac.mutation.SetUpdatedAt(t)
	return dac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (dac *DeliveryAddressCreate) SetNillableUpdatedAt(t *time.Time) *DeliveryAddressCreate {
	if t != nil {
		dac.SetUpdatedAt(*t)
	}
	return dac
}

// SetTelephoneID sets the "telephone" edge to the Tel entity by ID.
func (dac *DeliveryAddressCreate) SetTelephoneID(id int) *DeliveryAddressCreate {
	dac.mutation.SetTelephoneID(id)
	return dac
}

// SetNillableTelephoneID sets the "telephone" edge to the Tel entity by ID if the given value is not nil.
func (dac *DeliveryAddressCreate) SetNillableTelephoneID(id *int) *DeliveryAddressCreate {
	if id != nil {
		dac = dac.SetTelephoneID(*id)
	}
	return dac
}

// SetTelephone sets the "telephone" edge to the Tel entity.
func (dac *DeliveryAddressCreate) SetTelephone(t *Tel) *DeliveryAddressCreate {
	return dac.SetTelephoneID(t.ID)
}

// AddNoteIDs adds the "notes" edge to the Note entity by IDs.
func (dac *DeliveryAddressCreate) AddNoteIDs(ids ...int) *DeliveryAddressCreate {
	dac.mutation.AddNoteIDs(ids...)
	return dac
}

// AddNotes adds the "notes" edges to the Note entity.
func (dac *DeliveryAddressCreate) AddNotes(n ...*Note) *DeliveryAddressCreate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return dac.AddNoteIDs(ids...)
}

// SetCustomerID sets the "customer" edge to the Customer entity by ID.
func (dac *DeliveryAddressCreate) SetCustomerID(id int) *DeliveryAddressCreate {
	dac.mutation.SetCustomerID(id)
	return dac
}

// SetNillableCustomerID sets the "customer" edge to the Customer entity by ID if the given value is not nil.
func (dac *DeliveryAddressCreate) SetNillableCustomerID(id *int) *DeliveryAddressCreate {
	if id != nil {
		dac = dac.SetCustomerID(*id)
	}
	return dac
}

// SetCustomer sets the "customer" edge to the Customer entity.
func (dac *DeliveryAddressCreate) SetCustomer(c *Customer) *DeliveryAddressCreate {
	return dac.SetCustomerID(c.ID)
}

// Mutation returns the DeliveryAddressMutation object of the builder.
func (dac *DeliveryAddressCreate) Mutation() *DeliveryAddressMutation {
	return dac.mutation
}

// Save creates the DeliveryAddress in the database.
func (dac *DeliveryAddressCreate) Save(ctx context.Context) (*DeliveryAddress, error) {
	dac.defaults()
	return withHooks(ctx, dac.sqlSave, dac.mutation, dac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (dac *DeliveryAddressCreate) SaveX(ctx context.Context) *DeliveryAddress {
	v, err := dac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dac *DeliveryAddressCreate) Exec(ctx context.Context) error {
	_, err := dac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dac *DeliveryAddressCreate) ExecX(ctx context.Context) {
	if err := dac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dac *DeliveryAddressCreate) defaults() {
	if _, ok := dac.mutation.CreatedAt(); !ok {
		v := deliveryaddress.DefaultCreatedAt()
		dac.mutation.SetCreatedAt(v)
	}
	if _, ok := dac.mutation.UpdatedAt(); !ok {
		v := deliveryaddress.DefaultUpdatedAt()
		dac.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dac *DeliveryAddressCreate) check() error {
	if _, ok := dac.mutation.City(); !ok {
		return &ValidationError{Name: "city", err: errors.New(`ent: missing required field "DeliveryAddress.city"`)}
	}
	if v, ok := dac.mutation.City(); ok {
		if err := deliveryaddress.CityValidator(v); err != nil {
			return &ValidationError{Name: "city", err: fmt.Errorf(`ent: validator failed for field "DeliveryAddress.city": %w`, err)}
		}
	}
	if _, ok := dac.mutation.Street(); !ok {
		return &ValidationError{Name: "street", err: errors.New(`ent: missing required field "DeliveryAddress.street"`)}
	}
	if v, ok := dac.mutation.Street(); ok {
		if err := deliveryaddress.StreetValidator(v); err != nil {
			return &ValidationError{Name: "street", err: fmt.Errorf(`ent: validator failed for field "DeliveryAddress.street": %w`, err)}
		}
	}
	if _, ok := dac.mutation.Zip(); !ok {
		return &ValidationError{Name: "zip", err: errors.New(`ent: missing required field "DeliveryAddress.zip"`)}
	}
	if v, ok := dac.mutation.Zip(); ok {
		if err := deliveryaddress.ZipValidator(v); err != nil {
			return &ValidationError{Name: "zip", err: fmt.Errorf(`ent: validator failed for field "DeliveryAddress.zip": %w`, err)}
		}
	}
	if _, ok := dac.mutation.Number(); !ok {
		return &ValidationError{Name: "number", err: errors.New(`ent: missing required field "DeliveryAddress.number"`)}
	}
	if v, ok := dac.mutation.Number(); ok {
		if err := deliveryaddress.NumberValidator(v); err != nil {
			return &ValidationError{Name: "number", err: fmt.Errorf(`ent: validator failed for field "DeliveryAddress.number": %w`, err)}
		}
	}
	if _, ok := dac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "DeliveryAddress.created_at"`)}
	}
	if _, ok := dac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "DeliveryAddress.updated_at"`)}
	}
	return nil
}

func (dac *DeliveryAddressCreate) sqlSave(ctx context.Context) (*DeliveryAddress, error) {
	if err := dac.check(); err != nil {
		return nil, err
	}
	_node, _spec := dac.createSpec()
	if err := sqlgraph.CreateNode(ctx, dac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	dac.mutation.id = &_node.ID
	dac.mutation.done = true
	return _node, nil
}

func (dac *DeliveryAddressCreate) createSpec() (*DeliveryAddress, *sqlgraph.CreateSpec) {
	var (
		_node = &DeliveryAddress{config: dac.config}
		_spec = sqlgraph.NewCreateSpec(deliveryaddress.Table, sqlgraph.NewFieldSpec(deliveryaddress.FieldID, field.TypeInt))
	)
	if value, ok := dac.mutation.City(); ok {
		_spec.SetField(deliveryaddress.FieldCity, field.TypeString, value)
		_node.City = value
	}
	if value, ok := dac.mutation.Street(); ok {
		_spec.SetField(deliveryaddress.FieldStreet, field.TypeString, value)
		_node.Street = value
	}
	if value, ok := dac.mutation.Zip(); ok {
		_spec.SetField(deliveryaddress.FieldZip, field.TypeString, value)
		_node.Zip = value
	}
	if value, ok := dac.mutation.Number(); ok {
		_spec.SetField(deliveryaddress.FieldNumber, field.TypeString, value)
		_node.Number = value
	}
	if value, ok := dac.mutation.CreatedAt(); ok {
		_spec.SetField(deliveryaddress.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := dac.mutation.UpdatedAt(); ok {
		_spec.SetField(deliveryaddress.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := dac.mutation.TelephoneIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deliveryaddress.TelephoneTable,
			Columns: []string{deliveryaddress.TelephoneColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tel.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.delivery_address_telephone = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dac.mutation.NotesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deliveryaddress.NotesTable,
			Columns: []string{deliveryaddress.NotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(note.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dac.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deliveryaddress.CustomerTable,
			Columns: []string{deliveryaddress.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.customer_delivery_addresses = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// DeliveryAddressCreateBulk is the builder for creating many DeliveryAddress entities in bulk.
type DeliveryAddressCreateBulk struct {
	config
	err      error
	builders []*DeliveryAddressCreate
}

// Save creates the DeliveryAddress entities in the database.
func (dacb *DeliveryAddressCreateBulk) Save(ctx context.Context) ([]*DeliveryAddress, error) {
	if dacb.err != nil {
		return nil, dacb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(dacb.builders))
	nodes := make([]*DeliveryAddress, len(dacb.builders))
	mutators := make([]Mutator, len(dacb.builders))
	for i := range dacb.builders {
		func(i int, root context.Context) {
			builder := dacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DeliveryAddressMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dacb *DeliveryAddressCreateBulk) SaveX(ctx context.Context) []*DeliveryAddress {
	v, err := dacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dacb *DeliveryAddressCreateBulk) Exec(ctx context.Context) error {
	_, err := dacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dacb *DeliveryAddressCreateBulk) ExecX(ctx context.Context) {
	if err := dacb.Exec(ctx); err != nil {
		panic(err)
	}
}
