// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/derfinlay/basecrm/ent/billingaddress"
	"github.com/derfinlay/basecrm/ent/customer"
	"github.com/derfinlay/basecrm/ent/note"
	"github.com/derfinlay/basecrm/ent/order"
	"github.com/derfinlay/basecrm/ent/predicate"
)

// BillingAddressUpdate is the builder for updating BillingAddress entities.
type BillingAddressUpdate struct {
	config
	hooks    []Hook
	mutation *BillingAddressMutation
}

// Where appends a list predicates to the BillingAddressUpdate builder.
func (bau *BillingAddressUpdate) Where(ps ...predicate.BillingAddress) *BillingAddressUpdate {
	bau.mutation.Where(ps...)
	return bau
}

// SetUpdatedAt sets the "updated_at" field.
func (bau *BillingAddressUpdate) SetUpdatedAt(t time.Time) *BillingAddressUpdate {
	bau.mutation.SetUpdatedAt(t)
	return bau
}

// AddNoteIDs adds the "notes" edge to the Note entity by IDs.
func (bau *BillingAddressUpdate) AddNoteIDs(ids ...int) *BillingAddressUpdate {
	bau.mutation.AddNoteIDs(ids...)
	return bau
}

// AddNotes adds the "notes" edges to the Note entity.
func (bau *BillingAddressUpdate) AddNotes(n ...*Note) *BillingAddressUpdate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return bau.AddNoteIDs(ids...)
}

// SetCustomerID sets the "customer" edge to the Customer entity by ID.
func (bau *BillingAddressUpdate) SetCustomerID(id int) *BillingAddressUpdate {
	bau.mutation.SetCustomerID(id)
	return bau
}

// SetNillableCustomerID sets the "customer" edge to the Customer entity by ID if the given value is not nil.
func (bau *BillingAddressUpdate) SetNillableCustomerID(id *int) *BillingAddressUpdate {
	if id != nil {
		bau = bau.SetCustomerID(*id)
	}
	return bau
}

// SetCustomer sets the "customer" edge to the Customer entity.
func (bau *BillingAddressUpdate) SetCustomer(c *Customer) *BillingAddressUpdate {
	return bau.SetCustomerID(c.ID)
}

// SetOrderID sets the "order" edge to the Order entity by ID.
func (bau *BillingAddressUpdate) SetOrderID(id int) *BillingAddressUpdate {
	bau.mutation.SetOrderID(id)
	return bau
}

// SetNillableOrderID sets the "order" edge to the Order entity by ID if the given value is not nil.
func (bau *BillingAddressUpdate) SetNillableOrderID(id *int) *BillingAddressUpdate {
	if id != nil {
		bau = bau.SetOrderID(*id)
	}
	return bau
}

// SetOrder sets the "order" edge to the Order entity.
func (bau *BillingAddressUpdate) SetOrder(o *Order) *BillingAddressUpdate {
	return bau.SetOrderID(o.ID)
}

// Mutation returns the BillingAddressMutation object of the builder.
func (bau *BillingAddressUpdate) Mutation() *BillingAddressMutation {
	return bau.mutation
}

// ClearNotes clears all "notes" edges to the Note entity.
func (bau *BillingAddressUpdate) ClearNotes() *BillingAddressUpdate {
	bau.mutation.ClearNotes()
	return bau
}

// RemoveNoteIDs removes the "notes" edge to Note entities by IDs.
func (bau *BillingAddressUpdate) RemoveNoteIDs(ids ...int) *BillingAddressUpdate {
	bau.mutation.RemoveNoteIDs(ids...)
	return bau
}

// RemoveNotes removes "notes" edges to Note entities.
func (bau *BillingAddressUpdate) RemoveNotes(n ...*Note) *BillingAddressUpdate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return bau.RemoveNoteIDs(ids...)
}

// ClearCustomer clears the "customer" edge to the Customer entity.
func (bau *BillingAddressUpdate) ClearCustomer() *BillingAddressUpdate {
	bau.mutation.ClearCustomer()
	return bau
}

// ClearOrder clears the "order" edge to the Order entity.
func (bau *BillingAddressUpdate) ClearOrder() *BillingAddressUpdate {
	bau.mutation.ClearOrder()
	return bau
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bau *BillingAddressUpdate) Save(ctx context.Context) (int, error) {
	bau.defaults()
	return withHooks(ctx, bau.sqlSave, bau.mutation, bau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bau *BillingAddressUpdate) SaveX(ctx context.Context) int {
	affected, err := bau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bau *BillingAddressUpdate) Exec(ctx context.Context) error {
	_, err := bau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bau *BillingAddressUpdate) ExecX(ctx context.Context) {
	if err := bau.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bau *BillingAddressUpdate) defaults() {
	if _, ok := bau.mutation.UpdatedAt(); !ok {
		v := billingaddress.UpdateDefaultUpdatedAt()
		bau.mutation.SetUpdatedAt(v)
	}
}

func (bau *BillingAddressUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(billingaddress.Table, billingaddress.Columns, sqlgraph.NewFieldSpec(billingaddress.FieldID, field.TypeInt))
	if ps := bau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bau.mutation.UpdatedAt(); ok {
		_spec.SetField(billingaddress.FieldUpdatedAt, field.TypeTime, value)
	}
	if bau.mutation.NotesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   billingaddress.NotesTable,
			Columns: []string{billingaddress.NotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(note.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bau.mutation.RemovedNotesIDs(); len(nodes) > 0 && !bau.mutation.NotesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   billingaddress.NotesTable,
			Columns: []string{billingaddress.NotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(note.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bau.mutation.NotesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   billingaddress.NotesTable,
			Columns: []string{billingaddress.NotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(note.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bau.mutation.CustomerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billingaddress.CustomerTable,
			Columns: []string{billingaddress.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bau.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billingaddress.CustomerTable,
			Columns: []string{billingaddress.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bau.mutation.OrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   billingaddress.OrderTable,
			Columns: []string{billingaddress.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bau.mutation.OrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   billingaddress.OrderTable,
			Columns: []string{billingaddress.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{billingaddress.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bau.mutation.done = true
	return n, nil
}

// BillingAddressUpdateOne is the builder for updating a single BillingAddress entity.
type BillingAddressUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BillingAddressMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (bauo *BillingAddressUpdateOne) SetUpdatedAt(t time.Time) *BillingAddressUpdateOne {
	bauo.mutation.SetUpdatedAt(t)
	return bauo
}

// AddNoteIDs adds the "notes" edge to the Note entity by IDs.
func (bauo *BillingAddressUpdateOne) AddNoteIDs(ids ...int) *BillingAddressUpdateOne {
	bauo.mutation.AddNoteIDs(ids...)
	return bauo
}

// AddNotes adds the "notes" edges to the Note entity.
func (bauo *BillingAddressUpdateOne) AddNotes(n ...*Note) *BillingAddressUpdateOne {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return bauo.AddNoteIDs(ids...)
}

// SetCustomerID sets the "customer" edge to the Customer entity by ID.
func (bauo *BillingAddressUpdateOne) SetCustomerID(id int) *BillingAddressUpdateOne {
	bauo.mutation.SetCustomerID(id)
	return bauo
}

// SetNillableCustomerID sets the "customer" edge to the Customer entity by ID if the given value is not nil.
func (bauo *BillingAddressUpdateOne) SetNillableCustomerID(id *int) *BillingAddressUpdateOne {
	if id != nil {
		bauo = bauo.SetCustomerID(*id)
	}
	return bauo
}

// SetCustomer sets the "customer" edge to the Customer entity.
func (bauo *BillingAddressUpdateOne) SetCustomer(c *Customer) *BillingAddressUpdateOne {
	return bauo.SetCustomerID(c.ID)
}

// SetOrderID sets the "order" edge to the Order entity by ID.
func (bauo *BillingAddressUpdateOne) SetOrderID(id int) *BillingAddressUpdateOne {
	bauo.mutation.SetOrderID(id)
	return bauo
}

// SetNillableOrderID sets the "order" edge to the Order entity by ID if the given value is not nil.
func (bauo *BillingAddressUpdateOne) SetNillableOrderID(id *int) *BillingAddressUpdateOne {
	if id != nil {
		bauo = bauo.SetOrderID(*id)
	}
	return bauo
}

// SetOrder sets the "order" edge to the Order entity.
func (bauo *BillingAddressUpdateOne) SetOrder(o *Order) *BillingAddressUpdateOne {
	return bauo.SetOrderID(o.ID)
}

// Mutation returns the BillingAddressMutation object of the builder.
func (bauo *BillingAddressUpdateOne) Mutation() *BillingAddressMutation {
	return bauo.mutation
}

// ClearNotes clears all "notes" edges to the Note entity.
func (bauo *BillingAddressUpdateOne) ClearNotes() *BillingAddressUpdateOne {
	bauo.mutation.ClearNotes()
	return bauo
}

// RemoveNoteIDs removes the "notes" edge to Note entities by IDs.
func (bauo *BillingAddressUpdateOne) RemoveNoteIDs(ids ...int) *BillingAddressUpdateOne {
	bauo.mutation.RemoveNoteIDs(ids...)
	return bauo
}

// RemoveNotes removes "notes" edges to Note entities.
func (bauo *BillingAddressUpdateOne) RemoveNotes(n ...*Note) *BillingAddressUpdateOne {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return bauo.RemoveNoteIDs(ids...)
}

// ClearCustomer clears the "customer" edge to the Customer entity.
func (bauo *BillingAddressUpdateOne) ClearCustomer() *BillingAddressUpdateOne {
	bauo.mutation.ClearCustomer()
	return bauo
}

// ClearOrder clears the "order" edge to the Order entity.
func (bauo *BillingAddressUpdateOne) ClearOrder() *BillingAddressUpdateOne {
	bauo.mutation.ClearOrder()
	return bauo
}

// Where appends a list predicates to the BillingAddressUpdate builder.
func (bauo *BillingAddressUpdateOne) Where(ps ...predicate.BillingAddress) *BillingAddressUpdateOne {
	bauo.mutation.Where(ps...)
	return bauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (bauo *BillingAddressUpdateOne) Select(field string, fields ...string) *BillingAddressUpdateOne {
	bauo.fields = append([]string{field}, fields...)
	return bauo
}

// Save executes the query and returns the updated BillingAddress entity.
func (bauo *BillingAddressUpdateOne) Save(ctx context.Context) (*BillingAddress, error) {
	bauo.defaults()
	return withHooks(ctx, bauo.sqlSave, bauo.mutation, bauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bauo *BillingAddressUpdateOne) SaveX(ctx context.Context) *BillingAddress {
	node, err := bauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (bauo *BillingAddressUpdateOne) Exec(ctx context.Context) error {
	_, err := bauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bauo *BillingAddressUpdateOne) ExecX(ctx context.Context) {
	if err := bauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bauo *BillingAddressUpdateOne) defaults() {
	if _, ok := bauo.mutation.UpdatedAt(); !ok {
		v := billingaddress.UpdateDefaultUpdatedAt()
		bauo.mutation.SetUpdatedAt(v)
	}
}

func (bauo *BillingAddressUpdateOne) sqlSave(ctx context.Context) (_node *BillingAddress, err error) {
	_spec := sqlgraph.NewUpdateSpec(billingaddress.Table, billingaddress.Columns, sqlgraph.NewFieldSpec(billingaddress.FieldID, field.TypeInt))
	id, ok := bauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "BillingAddress.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := bauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, billingaddress.FieldID)
		for _, f := range fields {
			if !billingaddress.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != billingaddress.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := bauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bauo.mutation.UpdatedAt(); ok {
		_spec.SetField(billingaddress.FieldUpdatedAt, field.TypeTime, value)
	}
	if bauo.mutation.NotesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   billingaddress.NotesTable,
			Columns: []string{billingaddress.NotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(note.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bauo.mutation.RemovedNotesIDs(); len(nodes) > 0 && !bauo.mutation.NotesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   billingaddress.NotesTable,
			Columns: []string{billingaddress.NotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(note.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bauo.mutation.NotesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   billingaddress.NotesTable,
			Columns: []string{billingaddress.NotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(note.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bauo.mutation.CustomerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billingaddress.CustomerTable,
			Columns: []string{billingaddress.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bauo.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billingaddress.CustomerTable,
			Columns: []string{billingaddress.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bauo.mutation.OrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   billingaddress.OrderTable,
			Columns: []string{billingaddress.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bauo.mutation.OrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   billingaddress.OrderTable,
			Columns: []string{billingaddress.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &BillingAddress{config: bauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, bauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{billingaddress.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	bauo.mutation.done = true
	return _node, nil
}
