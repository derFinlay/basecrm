// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/derfinlay/basecrm/ent/login"
	"github.com/derfinlay/basecrm/ent/loginreset"
	"github.com/derfinlay/basecrm/ent/note"
	"github.com/derfinlay/basecrm/ent/predicate"
)

// LoginResetUpdate is the builder for updating LoginReset entities.
type LoginResetUpdate struct {
	config
	hooks    []Hook
	mutation *LoginResetMutation
}

// Where appends a list predicates to the LoginResetUpdate builder.
func (lru *LoginResetUpdate) Where(ps ...predicate.LoginReset) *LoginResetUpdate {
	lru.mutation.Where(ps...)
	return lru
}

// SetActive sets the "active" field.
func (lru *LoginResetUpdate) SetActive(b bool) *LoginResetUpdate {
	lru.mutation.SetActive(b)
	return lru
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (lru *LoginResetUpdate) SetNillableActive(b *bool) *LoginResetUpdate {
	if b != nil {
		lru.SetActive(*b)
	}
	return lru
}

// SetUpdatedAt sets the "updated_at" field.
func (lru *LoginResetUpdate) SetUpdatedAt(t time.Time) *LoginResetUpdate {
	lru.mutation.SetUpdatedAt(t)
	return lru
}

// AddNoteIDs adds the "notes" edge to the Note entity by IDs.
func (lru *LoginResetUpdate) AddNoteIDs(ids ...int) *LoginResetUpdate {
	lru.mutation.AddNoteIDs(ids...)
	return lru
}

// AddNotes adds the "notes" edges to the Note entity.
func (lru *LoginResetUpdate) AddNotes(n ...*Note) *LoginResetUpdate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return lru.AddNoteIDs(ids...)
}

// SetLoginID sets the "login" edge to the Login entity by ID.
func (lru *LoginResetUpdate) SetLoginID(id int) *LoginResetUpdate {
	lru.mutation.SetLoginID(id)
	return lru
}

// SetNillableLoginID sets the "login" edge to the Login entity by ID if the given value is not nil.
func (lru *LoginResetUpdate) SetNillableLoginID(id *int) *LoginResetUpdate {
	if id != nil {
		lru = lru.SetLoginID(*id)
	}
	return lru
}

// SetLogin sets the "login" edge to the Login entity.
func (lru *LoginResetUpdate) SetLogin(l *Login) *LoginResetUpdate {
	return lru.SetLoginID(l.ID)
}

// Mutation returns the LoginResetMutation object of the builder.
func (lru *LoginResetUpdate) Mutation() *LoginResetMutation {
	return lru.mutation
}

// ClearNotes clears all "notes" edges to the Note entity.
func (lru *LoginResetUpdate) ClearNotes() *LoginResetUpdate {
	lru.mutation.ClearNotes()
	return lru
}

// RemoveNoteIDs removes the "notes" edge to Note entities by IDs.
func (lru *LoginResetUpdate) RemoveNoteIDs(ids ...int) *LoginResetUpdate {
	lru.mutation.RemoveNoteIDs(ids...)
	return lru
}

// RemoveNotes removes "notes" edges to Note entities.
func (lru *LoginResetUpdate) RemoveNotes(n ...*Note) *LoginResetUpdate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return lru.RemoveNoteIDs(ids...)
}

// ClearLogin clears the "login" edge to the Login entity.
func (lru *LoginResetUpdate) ClearLogin() *LoginResetUpdate {
	lru.mutation.ClearLogin()
	return lru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (lru *LoginResetUpdate) Save(ctx context.Context) (int, error) {
	lru.defaults()
	return withHooks(ctx, lru.sqlSave, lru.mutation, lru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (lru *LoginResetUpdate) SaveX(ctx context.Context) int {
	affected, err := lru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (lru *LoginResetUpdate) Exec(ctx context.Context) error {
	_, err := lru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lru *LoginResetUpdate) ExecX(ctx context.Context) {
	if err := lru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lru *LoginResetUpdate) defaults() {
	if _, ok := lru.mutation.UpdatedAt(); !ok {
		v := loginreset.UpdateDefaultUpdatedAt()
		lru.mutation.SetUpdatedAt(v)
	}
}

func (lru *LoginResetUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(loginreset.Table, loginreset.Columns, sqlgraph.NewFieldSpec(loginreset.FieldID, field.TypeInt))
	if ps := lru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lru.mutation.Active(); ok {
		_spec.SetField(loginreset.FieldActive, field.TypeBool, value)
	}
	if value, ok := lru.mutation.UpdatedAt(); ok {
		_spec.SetField(loginreset.FieldUpdatedAt, field.TypeTime, value)
	}
	if lru.mutation.NotesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   loginreset.NotesTable,
			Columns: []string{loginreset.NotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(note.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lru.mutation.RemovedNotesIDs(); len(nodes) > 0 && !lru.mutation.NotesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   loginreset.NotesTable,
			Columns: []string{loginreset.NotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(note.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lru.mutation.NotesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   loginreset.NotesTable,
			Columns: []string{loginreset.NotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(note.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if lru.mutation.LoginCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   loginreset.LoginTable,
			Columns: []string{loginreset.LoginColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(login.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lru.mutation.LoginIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   loginreset.LoginTable,
			Columns: []string{loginreset.LoginColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(login.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, lru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{loginreset.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	lru.mutation.done = true
	return n, nil
}

// LoginResetUpdateOne is the builder for updating a single LoginReset entity.
type LoginResetUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *LoginResetMutation
}

// SetActive sets the "active" field.
func (lruo *LoginResetUpdateOne) SetActive(b bool) *LoginResetUpdateOne {
	lruo.mutation.SetActive(b)
	return lruo
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (lruo *LoginResetUpdateOne) SetNillableActive(b *bool) *LoginResetUpdateOne {
	if b != nil {
		lruo.SetActive(*b)
	}
	return lruo
}

// SetUpdatedAt sets the "updated_at" field.
func (lruo *LoginResetUpdateOne) SetUpdatedAt(t time.Time) *LoginResetUpdateOne {
	lruo.mutation.SetUpdatedAt(t)
	return lruo
}

// AddNoteIDs adds the "notes" edge to the Note entity by IDs.
func (lruo *LoginResetUpdateOne) AddNoteIDs(ids ...int) *LoginResetUpdateOne {
	lruo.mutation.AddNoteIDs(ids...)
	return lruo
}

// AddNotes adds the "notes" edges to the Note entity.
func (lruo *LoginResetUpdateOne) AddNotes(n ...*Note) *LoginResetUpdateOne {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return lruo.AddNoteIDs(ids...)
}

// SetLoginID sets the "login" edge to the Login entity by ID.
func (lruo *LoginResetUpdateOne) SetLoginID(id int) *LoginResetUpdateOne {
	lruo.mutation.SetLoginID(id)
	return lruo
}

// SetNillableLoginID sets the "login" edge to the Login entity by ID if the given value is not nil.
func (lruo *LoginResetUpdateOne) SetNillableLoginID(id *int) *LoginResetUpdateOne {
	if id != nil {
		lruo = lruo.SetLoginID(*id)
	}
	return lruo
}

// SetLogin sets the "login" edge to the Login entity.
func (lruo *LoginResetUpdateOne) SetLogin(l *Login) *LoginResetUpdateOne {
	return lruo.SetLoginID(l.ID)
}

// Mutation returns the LoginResetMutation object of the builder.
func (lruo *LoginResetUpdateOne) Mutation() *LoginResetMutation {
	return lruo.mutation
}

// ClearNotes clears all "notes" edges to the Note entity.
func (lruo *LoginResetUpdateOne) ClearNotes() *LoginResetUpdateOne {
	lruo.mutation.ClearNotes()
	return lruo
}

// RemoveNoteIDs removes the "notes" edge to Note entities by IDs.
func (lruo *LoginResetUpdateOne) RemoveNoteIDs(ids ...int) *LoginResetUpdateOne {
	lruo.mutation.RemoveNoteIDs(ids...)
	return lruo
}

// RemoveNotes removes "notes" edges to Note entities.
func (lruo *LoginResetUpdateOne) RemoveNotes(n ...*Note) *LoginResetUpdateOne {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return lruo.RemoveNoteIDs(ids...)
}

// ClearLogin clears the "login" edge to the Login entity.
func (lruo *LoginResetUpdateOne) ClearLogin() *LoginResetUpdateOne {
	lruo.mutation.ClearLogin()
	return lruo
}

// Where appends a list predicates to the LoginResetUpdate builder.
func (lruo *LoginResetUpdateOne) Where(ps ...predicate.LoginReset) *LoginResetUpdateOne {
	lruo.mutation.Where(ps...)
	return lruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (lruo *LoginResetUpdateOne) Select(field string, fields ...string) *LoginResetUpdateOne {
	lruo.fields = append([]string{field}, fields...)
	return lruo
}

// Save executes the query and returns the updated LoginReset entity.
func (lruo *LoginResetUpdateOne) Save(ctx context.Context) (*LoginReset, error) {
	lruo.defaults()
	return withHooks(ctx, lruo.sqlSave, lruo.mutation, lruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (lruo *LoginResetUpdateOne) SaveX(ctx context.Context) *LoginReset {
	node, err := lruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (lruo *LoginResetUpdateOne) Exec(ctx context.Context) error {
	_, err := lruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lruo *LoginResetUpdateOne) ExecX(ctx context.Context) {
	if err := lruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lruo *LoginResetUpdateOne) defaults() {
	if _, ok := lruo.mutation.UpdatedAt(); !ok {
		v := loginreset.UpdateDefaultUpdatedAt()
		lruo.mutation.SetUpdatedAt(v)
	}
}

func (lruo *LoginResetUpdateOne) sqlSave(ctx context.Context) (_node *LoginReset, err error) {
	_spec := sqlgraph.NewUpdateSpec(loginreset.Table, loginreset.Columns, sqlgraph.NewFieldSpec(loginreset.FieldID, field.TypeInt))
	id, ok := lruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "LoginReset.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := lruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, loginreset.FieldID)
		for _, f := range fields {
			if !loginreset.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != loginreset.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := lruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lruo.mutation.Active(); ok {
		_spec.SetField(loginreset.FieldActive, field.TypeBool, value)
	}
	if value, ok := lruo.mutation.UpdatedAt(); ok {
		_spec.SetField(loginreset.FieldUpdatedAt, field.TypeTime, value)
	}
	if lruo.mutation.NotesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   loginreset.NotesTable,
			Columns: []string{loginreset.NotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(note.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lruo.mutation.RemovedNotesIDs(); len(nodes) > 0 && !lruo.mutation.NotesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   loginreset.NotesTable,
			Columns: []string{loginreset.NotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(note.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lruo.mutation.NotesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   loginreset.NotesTable,
			Columns: []string{loginreset.NotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(note.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if lruo.mutation.LoginCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   loginreset.LoginTable,
			Columns: []string{loginreset.LoginColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(login.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lruo.mutation.LoginIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   loginreset.LoginTable,
			Columns: []string{loginreset.LoginColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(login.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &LoginReset{config: lruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, lruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{loginreset.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	lruo.mutation.done = true
	return _node, nil
}
