// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/derfinlay/basecrm/ent/billingaddress"
	"github.com/derfinlay/basecrm/ent/customer"
	"github.com/derfinlay/basecrm/ent/deliveryaddress"
	"github.com/derfinlay/basecrm/ent/note"
	"github.com/derfinlay/basecrm/ent/order"
	"github.com/derfinlay/basecrm/ent/position"
	"github.com/derfinlay/basecrm/ent/predicate"
	"github.com/derfinlay/basecrm/ent/user"
)

// OrderUpdate is the builder for updating Order entities.
type OrderUpdate struct {
	config
	hooks    []Hook
	mutation *OrderMutation
}

// Where appends a list predicates to the OrderUpdate builder.
func (ou *OrderUpdate) Where(ps ...predicate.Order) *OrderUpdate {
	ou.mutation.Where(ps...)
	return ou
}

// SetDue sets the "due" field.
func (ou *OrderUpdate) SetDue(t time.Time) *OrderUpdate {
	ou.mutation.SetDue(t)
	return ou
}

// SetNillableDue sets the "due" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableDue(t *time.Time) *OrderUpdate {
	if t != nil {
		ou.SetDue(*t)
	}
	return ou
}

// SetPrintedAt sets the "printed_at" field.
func (ou *OrderUpdate) SetPrintedAt(t time.Time) *OrderUpdate {
	ou.mutation.SetPrintedAt(t)
	return ou
}

// SetNillablePrintedAt sets the "printed_at" field if the given value is not nil.
func (ou *OrderUpdate) SetNillablePrintedAt(t *time.Time) *OrderUpdate {
	if t != nil {
		ou.SetPrintedAt(*t)
	}
	return ou
}

// SetPayedAt sets the "payed_at" field.
func (ou *OrderUpdate) SetPayedAt(t time.Time) *OrderUpdate {
	ou.mutation.SetPayedAt(t)
	return ou
}

// SetNillablePayedAt sets the "payed_at" field if the given value is not nil.
func (ou *OrderUpdate) SetNillablePayedAt(t *time.Time) *OrderUpdate {
	if t != nil {
		ou.SetPayedAt(*t)
	}
	return ou
}

// SetDoneAt sets the "done_at" field.
func (ou *OrderUpdate) SetDoneAt(t time.Time) *OrderUpdate {
	ou.mutation.SetDoneAt(t)
	return ou
}

// SetNillableDoneAt sets the "done_at" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableDoneAt(t *time.Time) *OrderUpdate {
	if t != nil {
		ou.SetDoneAt(*t)
	}
	return ou
}

// SetUpdatedAt sets the "updated_at" field.
func (ou *OrderUpdate) SetUpdatedAt(t time.Time) *OrderUpdate {
	ou.mutation.SetUpdatedAt(t)
	return ou
}

// SetCustomerID sets the "customer" edge to the Customer entity by ID.
func (ou *OrderUpdate) SetCustomerID(id int) *OrderUpdate {
	ou.mutation.SetCustomerID(id)
	return ou
}

// SetNillableCustomerID sets the "customer" edge to the Customer entity by ID if the given value is not nil.
func (ou *OrderUpdate) SetNillableCustomerID(id *int) *OrderUpdate {
	if id != nil {
		ou = ou.SetCustomerID(*id)
	}
	return ou
}

// SetCustomer sets the "customer" edge to the Customer entity.
func (ou *OrderUpdate) SetCustomer(c *Customer) *OrderUpdate {
	return ou.SetCustomerID(c.ID)
}

// SetBillingAddressID sets the "billing_address" edge to the BillingAddress entity by ID.
func (ou *OrderUpdate) SetBillingAddressID(id int) *OrderUpdate {
	ou.mutation.SetBillingAddressID(id)
	return ou
}

// SetNillableBillingAddressID sets the "billing_address" edge to the BillingAddress entity by ID if the given value is not nil.
func (ou *OrderUpdate) SetNillableBillingAddressID(id *int) *OrderUpdate {
	if id != nil {
		ou = ou.SetBillingAddressID(*id)
	}
	return ou
}

// SetBillingAddress sets the "billing_address" edge to the BillingAddress entity.
func (ou *OrderUpdate) SetBillingAddress(b *BillingAddress) *OrderUpdate {
	return ou.SetBillingAddressID(b.ID)
}

// SetDeliveryAddressID sets the "delivery_address" edge to the DeliveryAddress entity by ID.
func (ou *OrderUpdate) SetDeliveryAddressID(id int) *OrderUpdate {
	ou.mutation.SetDeliveryAddressID(id)
	return ou
}

// SetNillableDeliveryAddressID sets the "delivery_address" edge to the DeliveryAddress entity by ID if the given value is not nil.
func (ou *OrderUpdate) SetNillableDeliveryAddressID(id *int) *OrderUpdate {
	if id != nil {
		ou = ou.SetDeliveryAddressID(*id)
	}
	return ou
}

// SetDeliveryAddress sets the "delivery_address" edge to the DeliveryAddress entity.
func (ou *OrderUpdate) SetDeliveryAddress(d *DeliveryAddress) *OrderUpdate {
	return ou.SetDeliveryAddressID(d.ID)
}

// AddNoteIDs adds the "notes" edge to the Note entity by IDs.
func (ou *OrderUpdate) AddNoteIDs(ids ...int) *OrderUpdate {
	ou.mutation.AddNoteIDs(ids...)
	return ou
}

// AddNotes adds the "notes" edges to the Note entity.
func (ou *OrderUpdate) AddNotes(n ...*Note) *OrderUpdate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return ou.AddNoteIDs(ids...)
}

// SetCreatedByID sets the "created_by" edge to the User entity by ID.
func (ou *OrderUpdate) SetCreatedByID(id int) *OrderUpdate {
	ou.mutation.SetCreatedByID(id)
	return ou
}

// SetNillableCreatedByID sets the "created_by" edge to the User entity by ID if the given value is not nil.
func (ou *OrderUpdate) SetNillableCreatedByID(id *int) *OrderUpdate {
	if id != nil {
		ou = ou.SetCreatedByID(*id)
	}
	return ou
}

// SetCreatedBy sets the "created_by" edge to the User entity.
func (ou *OrderUpdate) SetCreatedBy(u *User) *OrderUpdate {
	return ou.SetCreatedByID(u.ID)
}

// AddPositionIDs adds the "positions" edge to the Position entity by IDs.
func (ou *OrderUpdate) AddPositionIDs(ids ...int) *OrderUpdate {
	ou.mutation.AddPositionIDs(ids...)
	return ou
}

// AddPositions adds the "positions" edges to the Position entity.
func (ou *OrderUpdate) AddPositions(p ...*Position) *OrderUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ou.AddPositionIDs(ids...)
}

// Mutation returns the OrderMutation object of the builder.
func (ou *OrderUpdate) Mutation() *OrderMutation {
	return ou.mutation
}

// ClearCustomer clears the "customer" edge to the Customer entity.
func (ou *OrderUpdate) ClearCustomer() *OrderUpdate {
	ou.mutation.ClearCustomer()
	return ou
}

// ClearBillingAddress clears the "billing_address" edge to the BillingAddress entity.
func (ou *OrderUpdate) ClearBillingAddress() *OrderUpdate {
	ou.mutation.ClearBillingAddress()
	return ou
}

// ClearDeliveryAddress clears the "delivery_address" edge to the DeliveryAddress entity.
func (ou *OrderUpdate) ClearDeliveryAddress() *OrderUpdate {
	ou.mutation.ClearDeliveryAddress()
	return ou
}

// ClearNotes clears all "notes" edges to the Note entity.
func (ou *OrderUpdate) ClearNotes() *OrderUpdate {
	ou.mutation.ClearNotes()
	return ou
}

// RemoveNoteIDs removes the "notes" edge to Note entities by IDs.
func (ou *OrderUpdate) RemoveNoteIDs(ids ...int) *OrderUpdate {
	ou.mutation.RemoveNoteIDs(ids...)
	return ou
}

// RemoveNotes removes "notes" edges to Note entities.
func (ou *OrderUpdate) RemoveNotes(n ...*Note) *OrderUpdate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return ou.RemoveNoteIDs(ids...)
}

// ClearCreatedBy clears the "created_by" edge to the User entity.
func (ou *OrderUpdate) ClearCreatedBy() *OrderUpdate {
	ou.mutation.ClearCreatedBy()
	return ou
}

// ClearPositions clears all "positions" edges to the Position entity.
func (ou *OrderUpdate) ClearPositions() *OrderUpdate {
	ou.mutation.ClearPositions()
	return ou
}

// RemovePositionIDs removes the "positions" edge to Position entities by IDs.
func (ou *OrderUpdate) RemovePositionIDs(ids ...int) *OrderUpdate {
	ou.mutation.RemovePositionIDs(ids...)
	return ou
}

// RemovePositions removes "positions" edges to Position entities.
func (ou *OrderUpdate) RemovePositions(p ...*Position) *OrderUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ou.RemovePositionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ou *OrderUpdate) Save(ctx context.Context) (int, error) {
	ou.defaults()
	return withHooks(ctx, ou.sqlSave, ou.mutation, ou.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ou *OrderUpdate) SaveX(ctx context.Context) int {
	affected, err := ou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ou *OrderUpdate) Exec(ctx context.Context) error {
	_, err := ou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ou *OrderUpdate) ExecX(ctx context.Context) {
	if err := ou.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ou *OrderUpdate) defaults() {
	if _, ok := ou.mutation.UpdatedAt(); !ok {
		v := order.UpdateDefaultUpdatedAt()
		ou.mutation.SetUpdatedAt(v)
	}
}

func (ou *OrderUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(order.Table, order.Columns, sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt))
	if ps := ou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ou.mutation.Due(); ok {
		_spec.SetField(order.FieldDue, field.TypeTime, value)
	}
	if value, ok := ou.mutation.PrintedAt(); ok {
		_spec.SetField(order.FieldPrintedAt, field.TypeTime, value)
	}
	if value, ok := ou.mutation.PayedAt(); ok {
		_spec.SetField(order.FieldPayedAt, field.TypeTime, value)
	}
	if value, ok := ou.mutation.DoneAt(); ok {
		_spec.SetField(order.FieldDoneAt, field.TypeTime, value)
	}
	if value, ok := ou.mutation.UpdatedAt(); ok {
		_spec.SetField(order.FieldUpdatedAt, field.TypeTime, value)
	}
	if ou.mutation.CustomerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   order.CustomerTable,
			Columns: []string{order.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   order.CustomerTable,
			Columns: []string{order.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.BillingAddressCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   order.BillingAddressTable,
			Columns: []string{order.BillingAddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billingaddress.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.BillingAddressIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   order.BillingAddressTable,
			Columns: []string{order.BillingAddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billingaddress.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.DeliveryAddressCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   order.DeliveryAddressTable,
			Columns: []string{order.DeliveryAddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryaddress.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.DeliveryAddressIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   order.DeliveryAddressTable,
			Columns: []string{order.DeliveryAddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryaddress.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.NotesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.NotesTable,
			Columns: []string{order.NotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(note.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedNotesIDs(); len(nodes) > 0 && !ou.mutation.NotesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.NotesTable,
			Columns: []string{order.NotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(note.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.NotesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.NotesTable,
			Columns: []string{order.NotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(note.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.CreatedByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   order.CreatedByTable,
			Columns: []string{order.CreatedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.CreatedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   order.CreatedByTable,
			Columns: []string{order.CreatedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.PositionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.PositionsTable,
			Columns: []string{order.PositionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(position.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedPositionsIDs(); len(nodes) > 0 && !ou.mutation.PositionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.PositionsTable,
			Columns: []string{order.PositionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(position.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.PositionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.PositionsTable,
			Columns: []string{order.PositionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(position.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{order.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ou.mutation.done = true
	return n, nil
}

// OrderUpdateOne is the builder for updating a single Order entity.
type OrderUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OrderMutation
}

// SetDue sets the "due" field.
func (ouo *OrderUpdateOne) SetDue(t time.Time) *OrderUpdateOne {
	ouo.mutation.SetDue(t)
	return ouo
}

// SetNillableDue sets the "due" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableDue(t *time.Time) *OrderUpdateOne {
	if t != nil {
		ouo.SetDue(*t)
	}
	return ouo
}

// SetPrintedAt sets the "printed_at" field.
func (ouo *OrderUpdateOne) SetPrintedAt(t time.Time) *OrderUpdateOne {
	ouo.mutation.SetPrintedAt(t)
	return ouo
}

// SetNillablePrintedAt sets the "printed_at" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillablePrintedAt(t *time.Time) *OrderUpdateOne {
	if t != nil {
		ouo.SetPrintedAt(*t)
	}
	return ouo
}

// SetPayedAt sets the "payed_at" field.
func (ouo *OrderUpdateOne) SetPayedAt(t time.Time) *OrderUpdateOne {
	ouo.mutation.SetPayedAt(t)
	return ouo
}

// SetNillablePayedAt sets the "payed_at" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillablePayedAt(t *time.Time) *OrderUpdateOne {
	if t != nil {
		ouo.SetPayedAt(*t)
	}
	return ouo
}

// SetDoneAt sets the "done_at" field.
func (ouo *OrderUpdateOne) SetDoneAt(t time.Time) *OrderUpdateOne {
	ouo.mutation.SetDoneAt(t)
	return ouo
}

// SetNillableDoneAt sets the "done_at" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableDoneAt(t *time.Time) *OrderUpdateOne {
	if t != nil {
		ouo.SetDoneAt(*t)
	}
	return ouo
}

// SetUpdatedAt sets the "updated_at" field.
func (ouo *OrderUpdateOne) SetUpdatedAt(t time.Time) *OrderUpdateOne {
	ouo.mutation.SetUpdatedAt(t)
	return ouo
}

// SetCustomerID sets the "customer" edge to the Customer entity by ID.
func (ouo *OrderUpdateOne) SetCustomerID(id int) *OrderUpdateOne {
	ouo.mutation.SetCustomerID(id)
	return ouo
}

// SetNillableCustomerID sets the "customer" edge to the Customer entity by ID if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableCustomerID(id *int) *OrderUpdateOne {
	if id != nil {
		ouo = ouo.SetCustomerID(*id)
	}
	return ouo
}

// SetCustomer sets the "customer" edge to the Customer entity.
func (ouo *OrderUpdateOne) SetCustomer(c *Customer) *OrderUpdateOne {
	return ouo.SetCustomerID(c.ID)
}

// SetBillingAddressID sets the "billing_address" edge to the BillingAddress entity by ID.
func (ouo *OrderUpdateOne) SetBillingAddressID(id int) *OrderUpdateOne {
	ouo.mutation.SetBillingAddressID(id)
	return ouo
}

// SetNillableBillingAddressID sets the "billing_address" edge to the BillingAddress entity by ID if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableBillingAddressID(id *int) *OrderUpdateOne {
	if id != nil {
		ouo = ouo.SetBillingAddressID(*id)
	}
	return ouo
}

// SetBillingAddress sets the "billing_address" edge to the BillingAddress entity.
func (ouo *OrderUpdateOne) SetBillingAddress(b *BillingAddress) *OrderUpdateOne {
	return ouo.SetBillingAddressID(b.ID)
}

// SetDeliveryAddressID sets the "delivery_address" edge to the DeliveryAddress entity by ID.
func (ouo *OrderUpdateOne) SetDeliveryAddressID(id int) *OrderUpdateOne {
	ouo.mutation.SetDeliveryAddressID(id)
	return ouo
}

// SetNillableDeliveryAddressID sets the "delivery_address" edge to the DeliveryAddress entity by ID if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableDeliveryAddressID(id *int) *OrderUpdateOne {
	if id != nil {
		ouo = ouo.SetDeliveryAddressID(*id)
	}
	return ouo
}

// SetDeliveryAddress sets the "delivery_address" edge to the DeliveryAddress entity.
func (ouo *OrderUpdateOne) SetDeliveryAddress(d *DeliveryAddress) *OrderUpdateOne {
	return ouo.SetDeliveryAddressID(d.ID)
}

// AddNoteIDs adds the "notes" edge to the Note entity by IDs.
func (ouo *OrderUpdateOne) AddNoteIDs(ids ...int) *OrderUpdateOne {
	ouo.mutation.AddNoteIDs(ids...)
	return ouo
}

// AddNotes adds the "notes" edges to the Note entity.
func (ouo *OrderUpdateOne) AddNotes(n ...*Note) *OrderUpdateOne {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return ouo.AddNoteIDs(ids...)
}

// SetCreatedByID sets the "created_by" edge to the User entity by ID.
func (ouo *OrderUpdateOne) SetCreatedByID(id int) *OrderUpdateOne {
	ouo.mutation.SetCreatedByID(id)
	return ouo
}

// SetNillableCreatedByID sets the "created_by" edge to the User entity by ID if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableCreatedByID(id *int) *OrderUpdateOne {
	if id != nil {
		ouo = ouo.SetCreatedByID(*id)
	}
	return ouo
}

// SetCreatedBy sets the "created_by" edge to the User entity.
func (ouo *OrderUpdateOne) SetCreatedBy(u *User) *OrderUpdateOne {
	return ouo.SetCreatedByID(u.ID)
}

// AddPositionIDs adds the "positions" edge to the Position entity by IDs.
func (ouo *OrderUpdateOne) AddPositionIDs(ids ...int) *OrderUpdateOne {
	ouo.mutation.AddPositionIDs(ids...)
	return ouo
}

// AddPositions adds the "positions" edges to the Position entity.
func (ouo *OrderUpdateOne) AddPositions(p ...*Position) *OrderUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ouo.AddPositionIDs(ids...)
}

// Mutation returns the OrderMutation object of the builder.
func (ouo *OrderUpdateOne) Mutation() *OrderMutation {
	return ouo.mutation
}

// ClearCustomer clears the "customer" edge to the Customer entity.
func (ouo *OrderUpdateOne) ClearCustomer() *OrderUpdateOne {
	ouo.mutation.ClearCustomer()
	return ouo
}

// ClearBillingAddress clears the "billing_address" edge to the BillingAddress entity.
func (ouo *OrderUpdateOne) ClearBillingAddress() *OrderUpdateOne {
	ouo.mutation.ClearBillingAddress()
	return ouo
}

// ClearDeliveryAddress clears the "delivery_address" edge to the DeliveryAddress entity.
func (ouo *OrderUpdateOne) ClearDeliveryAddress() *OrderUpdateOne {
	ouo.mutation.ClearDeliveryAddress()
	return ouo
}

// ClearNotes clears all "notes" edges to the Note entity.
func (ouo *OrderUpdateOne) ClearNotes() *OrderUpdateOne {
	ouo.mutation.ClearNotes()
	return ouo
}

// RemoveNoteIDs removes the "notes" edge to Note entities by IDs.
func (ouo *OrderUpdateOne) RemoveNoteIDs(ids ...int) *OrderUpdateOne {
	ouo.mutation.RemoveNoteIDs(ids...)
	return ouo
}

// RemoveNotes removes "notes" edges to Note entities.
func (ouo *OrderUpdateOne) RemoveNotes(n ...*Note) *OrderUpdateOne {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return ouo.RemoveNoteIDs(ids...)
}

// ClearCreatedBy clears the "created_by" edge to the User entity.
func (ouo *OrderUpdateOne) ClearCreatedBy() *OrderUpdateOne {
	ouo.mutation.ClearCreatedBy()
	return ouo
}

// ClearPositions clears all "positions" edges to the Position entity.
func (ouo *OrderUpdateOne) ClearPositions() *OrderUpdateOne {
	ouo.mutation.ClearPositions()
	return ouo
}

// RemovePositionIDs removes the "positions" edge to Position entities by IDs.
func (ouo *OrderUpdateOne) RemovePositionIDs(ids ...int) *OrderUpdateOne {
	ouo.mutation.RemovePositionIDs(ids...)
	return ouo
}

// RemovePositions removes "positions" edges to Position entities.
func (ouo *OrderUpdateOne) RemovePositions(p ...*Position) *OrderUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ouo.RemovePositionIDs(ids...)
}

// Where appends a list predicates to the OrderUpdate builder.
func (ouo *OrderUpdateOne) Where(ps ...predicate.Order) *OrderUpdateOne {
	ouo.mutation.Where(ps...)
	return ouo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ouo *OrderUpdateOne) Select(field string, fields ...string) *OrderUpdateOne {
	ouo.fields = append([]string{field}, fields...)
	return ouo
}

// Save executes the query and returns the updated Order entity.
func (ouo *OrderUpdateOne) Save(ctx context.Context) (*Order, error) {
	ouo.defaults()
	return withHooks(ctx, ouo.sqlSave, ouo.mutation, ouo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ouo *OrderUpdateOne) SaveX(ctx context.Context) *Order {
	node, err := ouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ouo *OrderUpdateOne) Exec(ctx context.Context) error {
	_, err := ouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ouo *OrderUpdateOne) ExecX(ctx context.Context) {
	if err := ouo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ouo *OrderUpdateOne) defaults() {
	if _, ok := ouo.mutation.UpdatedAt(); !ok {
		v := order.UpdateDefaultUpdatedAt()
		ouo.mutation.SetUpdatedAt(v)
	}
}

func (ouo *OrderUpdateOne) sqlSave(ctx context.Context) (_node *Order, err error) {
	_spec := sqlgraph.NewUpdateSpec(order.Table, order.Columns, sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt))
	id, ok := ouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Order.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, order.FieldID)
		for _, f := range fields {
			if !order.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != order.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ouo.mutation.Due(); ok {
		_spec.SetField(order.FieldDue, field.TypeTime, value)
	}
	if value, ok := ouo.mutation.PrintedAt(); ok {
		_spec.SetField(order.FieldPrintedAt, field.TypeTime, value)
	}
	if value, ok := ouo.mutation.PayedAt(); ok {
		_spec.SetField(order.FieldPayedAt, field.TypeTime, value)
	}
	if value, ok := ouo.mutation.DoneAt(); ok {
		_spec.SetField(order.FieldDoneAt, field.TypeTime, value)
	}
	if value, ok := ouo.mutation.UpdatedAt(); ok {
		_spec.SetField(order.FieldUpdatedAt, field.TypeTime, value)
	}
	if ouo.mutation.CustomerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   order.CustomerTable,
			Columns: []string{order.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   order.CustomerTable,
			Columns: []string{order.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.BillingAddressCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   order.BillingAddressTable,
			Columns: []string{order.BillingAddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billingaddress.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.BillingAddressIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   order.BillingAddressTable,
			Columns: []string{order.BillingAddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billingaddress.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.DeliveryAddressCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   order.DeliveryAddressTable,
			Columns: []string{order.DeliveryAddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryaddress.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.DeliveryAddressIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   order.DeliveryAddressTable,
			Columns: []string{order.DeliveryAddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryaddress.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.NotesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.NotesTable,
			Columns: []string{order.NotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(note.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedNotesIDs(); len(nodes) > 0 && !ouo.mutation.NotesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.NotesTable,
			Columns: []string{order.NotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(note.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.NotesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.NotesTable,
			Columns: []string{order.NotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(note.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.CreatedByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   order.CreatedByTable,
			Columns: []string{order.CreatedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.CreatedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   order.CreatedByTable,
			Columns: []string{order.CreatedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.PositionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.PositionsTable,
			Columns: []string{order.PositionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(position.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedPositionsIDs(); len(nodes) > 0 && !ouo.mutation.PositionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.PositionsTable,
			Columns: []string{order.PositionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(position.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.PositionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.PositionsTable,
			Columns: []string{order.PositionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(position.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Order{config: ouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{order.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ouo.mutation.done = true
	return _node, nil
}
