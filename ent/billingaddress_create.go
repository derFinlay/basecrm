// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/derfinlay/basecrm/ent/billingaddress"
	"github.com/derfinlay/basecrm/ent/customer"
	"github.com/derfinlay/basecrm/ent/note"
)

// BillingAddressCreate is the builder for creating a BillingAddress entity.
type BillingAddressCreate struct {
	config
	mutation *BillingAddressMutation
	hooks    []Hook
}

// SetCity sets the "city" field.
func (bac *BillingAddressCreate) SetCity(s string) *BillingAddressCreate {
	bac.mutation.SetCity(s)
	return bac
}

// SetStreet sets the "street" field.
func (bac *BillingAddressCreate) SetStreet(s string) *BillingAddressCreate {
	bac.mutation.SetStreet(s)
	return bac
}

// SetZip sets the "zip" field.
func (bac *BillingAddressCreate) SetZip(s string) *BillingAddressCreate {
	bac.mutation.SetZip(s)
	return bac
}

// SetCreatedAt sets the "created_at" field.
func (bac *BillingAddressCreate) SetCreatedAt(t time.Time) *BillingAddressCreate {
	bac.mutation.SetCreatedAt(t)
	return bac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (bac *BillingAddressCreate) SetNillableCreatedAt(t *time.Time) *BillingAddressCreate {
	if t != nil {
		bac.SetCreatedAt(*t)
	}
	return bac
}

// SetUpdatedAt sets the "updated_at" field.
func (bac *BillingAddressCreate) SetUpdatedAt(t time.Time) *BillingAddressCreate {
	bac.mutation.SetUpdatedAt(t)
	return bac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (bac *BillingAddressCreate) SetNillableUpdatedAt(t *time.Time) *BillingAddressCreate {
	if t != nil {
		bac.SetUpdatedAt(*t)
	}
	return bac
}

// SetCustomerID sets the "customer" edge to the Customer entity by ID.
func (bac *BillingAddressCreate) SetCustomerID(id int) *BillingAddressCreate {
	bac.mutation.SetCustomerID(id)
	return bac
}

// SetNillableCustomerID sets the "customer" edge to the Customer entity by ID if the given value is not nil.
func (bac *BillingAddressCreate) SetNillableCustomerID(id *int) *BillingAddressCreate {
	if id != nil {
		bac = bac.SetCustomerID(*id)
	}
	return bac
}

// SetCustomer sets the "customer" edge to the Customer entity.
func (bac *BillingAddressCreate) SetCustomer(c *Customer) *BillingAddressCreate {
	return bac.SetCustomerID(c.ID)
}

// AddNoteIDs adds the "notes" edge to the Note entity by IDs.
func (bac *BillingAddressCreate) AddNoteIDs(ids ...int) *BillingAddressCreate {
	bac.mutation.AddNoteIDs(ids...)
	return bac
}

// AddNotes adds the "notes" edges to the Note entity.
func (bac *BillingAddressCreate) AddNotes(n ...*Note) *BillingAddressCreate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return bac.AddNoteIDs(ids...)
}

// Mutation returns the BillingAddressMutation object of the builder.
func (bac *BillingAddressCreate) Mutation() *BillingAddressMutation {
	return bac.mutation
}

// Save creates the BillingAddress in the database.
func (bac *BillingAddressCreate) Save(ctx context.Context) (*BillingAddress, error) {
	bac.defaults()
	return withHooks(ctx, bac.sqlSave, bac.mutation, bac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (bac *BillingAddressCreate) SaveX(ctx context.Context) *BillingAddress {
	v, err := bac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bac *BillingAddressCreate) Exec(ctx context.Context) error {
	_, err := bac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bac *BillingAddressCreate) ExecX(ctx context.Context) {
	if err := bac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bac *BillingAddressCreate) defaults() {
	if _, ok := bac.mutation.CreatedAt(); !ok {
		v := billingaddress.DefaultCreatedAt()
		bac.mutation.SetCreatedAt(v)
	}
	if _, ok := bac.mutation.UpdatedAt(); !ok {
		v := billingaddress.DefaultUpdatedAt()
		bac.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bac *BillingAddressCreate) check() error {
	if _, ok := bac.mutation.City(); !ok {
		return &ValidationError{Name: "city", err: errors.New(`ent: missing required field "BillingAddress.city"`)}
	}
	if v, ok := bac.mutation.City(); ok {
		if err := billingaddress.CityValidator(v); err != nil {
			return &ValidationError{Name: "city", err: fmt.Errorf(`ent: validator failed for field "BillingAddress.city": %w`, err)}
		}
	}
	if _, ok := bac.mutation.Street(); !ok {
		return &ValidationError{Name: "street", err: errors.New(`ent: missing required field "BillingAddress.street"`)}
	}
	if v, ok := bac.mutation.Street(); ok {
		if err := billingaddress.StreetValidator(v); err != nil {
			return &ValidationError{Name: "street", err: fmt.Errorf(`ent: validator failed for field "BillingAddress.street": %w`, err)}
		}
	}
	if _, ok := bac.mutation.Zip(); !ok {
		return &ValidationError{Name: "zip", err: errors.New(`ent: missing required field "BillingAddress.zip"`)}
	}
	if v, ok := bac.mutation.Zip(); ok {
		if err := billingaddress.ZipValidator(v); err != nil {
			return &ValidationError{Name: "zip", err: fmt.Errorf(`ent: validator failed for field "BillingAddress.zip": %w`, err)}
		}
	}
	if _, ok := bac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "BillingAddress.created_at"`)}
	}
	if _, ok := bac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "BillingAddress.updated_at"`)}
	}
	return nil
}

func (bac *BillingAddressCreate) sqlSave(ctx context.Context) (*BillingAddress, error) {
	if err := bac.check(); err != nil {
		return nil, err
	}
	_node, _spec := bac.createSpec()
	if err := sqlgraph.CreateNode(ctx, bac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	bac.mutation.id = &_node.ID
	bac.mutation.done = true
	return _node, nil
}

func (bac *BillingAddressCreate) createSpec() (*BillingAddress, *sqlgraph.CreateSpec) {
	var (
		_node = &BillingAddress{config: bac.config}
		_spec = sqlgraph.NewCreateSpec(billingaddress.Table, sqlgraph.NewFieldSpec(billingaddress.FieldID, field.TypeInt))
	)
	if value, ok := bac.mutation.City(); ok {
		_spec.SetField(billingaddress.FieldCity, field.TypeString, value)
		_node.City = value
	}
	if value, ok := bac.mutation.Street(); ok {
		_spec.SetField(billingaddress.FieldStreet, field.TypeString, value)
		_node.Street = value
	}
	if value, ok := bac.mutation.Zip(); ok {
		_spec.SetField(billingaddress.FieldZip, field.TypeString, value)
		_node.Zip = value
	}
	if value, ok := bac.mutation.CreatedAt(); ok {
		_spec.SetField(billingaddress.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := bac.mutation.UpdatedAt(); ok {
		_spec.SetField(billingaddress.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := bac.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billingaddress.CustomerTable,
			Columns: []string{billingaddress.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.customer_billing_addresses = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bac.mutation.NotesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   billingaddress.NotesTable,
			Columns: []string{billingaddress.NotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(note.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// BillingAddressCreateBulk is the builder for creating many BillingAddress entities in bulk.
type BillingAddressCreateBulk struct {
	config
	err      error
	builders []*BillingAddressCreate
}

// Save creates the BillingAddress entities in the database.
func (bacb *BillingAddressCreateBulk) Save(ctx context.Context) ([]*BillingAddress, error) {
	if bacb.err != nil {
		return nil, bacb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(bacb.builders))
	nodes := make([]*BillingAddress, len(bacb.builders))
	mutators := make([]Mutator, len(bacb.builders))
	for i := range bacb.builders {
		func(i int, root context.Context) {
			builder := bacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BillingAddressMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bacb *BillingAddressCreateBulk) SaveX(ctx context.Context) []*BillingAddress {
	v, err := bacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bacb *BillingAddressCreateBulk) Exec(ctx context.Context) error {
	_, err := bacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bacb *BillingAddressCreateBulk) ExecX(ctx context.Context) {
	if err := bacb.Exec(ctx); err != nil {
		panic(err)
	}
}
