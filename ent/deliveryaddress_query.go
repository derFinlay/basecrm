// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/derfinlay/basecrm/ent/customer"
	"github.com/derfinlay/basecrm/ent/deliveryaddress"
	"github.com/derfinlay/basecrm/ent/note"
	"github.com/derfinlay/basecrm/ent/order"
	"github.com/derfinlay/basecrm/ent/predicate"
	"github.com/derfinlay/basecrm/ent/tel"
)

// DeliveryAddressQuery is the builder for querying DeliveryAddress entities.
type DeliveryAddressQuery struct {
	config
	ctx           *QueryContext
	order         []deliveryaddress.OrderOption
	inters        []Interceptor
	predicates    []predicate.DeliveryAddress
	withTelephone *TelQuery
	withNotes     *NoteQuery
	withCustomer  *CustomerQuery
	withOrders    *OrderQuery
	withFKs       bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the DeliveryAddressQuery builder.
func (daq *DeliveryAddressQuery) Where(ps ...predicate.DeliveryAddress) *DeliveryAddressQuery {
	daq.predicates = append(daq.predicates, ps...)
	return daq
}

// Limit the number of records to be returned by this query.
func (daq *DeliveryAddressQuery) Limit(limit int) *DeliveryAddressQuery {
	daq.ctx.Limit = &limit
	return daq
}

// Offset to start from.
func (daq *DeliveryAddressQuery) Offset(offset int) *DeliveryAddressQuery {
	daq.ctx.Offset = &offset
	return daq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (daq *DeliveryAddressQuery) Unique(unique bool) *DeliveryAddressQuery {
	daq.ctx.Unique = &unique
	return daq
}

// Order specifies how the records should be ordered.
func (daq *DeliveryAddressQuery) Order(o ...deliveryaddress.OrderOption) *DeliveryAddressQuery {
	daq.order = append(daq.order, o...)
	return daq
}

// QueryTelephone chains the current query on the "telephone" edge.
func (daq *DeliveryAddressQuery) QueryTelephone() *TelQuery {
	query := (&TelClient{config: daq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := daq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := daq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(deliveryaddress.Table, deliveryaddress.FieldID, selector),
			sqlgraph.To(tel.Table, tel.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, deliveryaddress.TelephoneTable, deliveryaddress.TelephoneColumn),
		)
		fromU = sqlgraph.SetNeighbors(daq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryNotes chains the current query on the "notes" edge.
func (daq *DeliveryAddressQuery) QueryNotes() *NoteQuery {
	query := (&NoteClient{config: daq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := daq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := daq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(deliveryaddress.Table, deliveryaddress.FieldID, selector),
			sqlgraph.To(note.Table, note.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, deliveryaddress.NotesTable, deliveryaddress.NotesColumn),
		)
		fromU = sqlgraph.SetNeighbors(daq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCustomer chains the current query on the "customer" edge.
func (daq *DeliveryAddressQuery) QueryCustomer() *CustomerQuery {
	query := (&CustomerClient{config: daq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := daq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := daq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(deliveryaddress.Table, deliveryaddress.FieldID, selector),
			sqlgraph.To(customer.Table, customer.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, deliveryaddress.CustomerTable, deliveryaddress.CustomerColumn),
		)
		fromU = sqlgraph.SetNeighbors(daq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOrders chains the current query on the "orders" edge.
func (daq *DeliveryAddressQuery) QueryOrders() *OrderQuery {
	query := (&OrderClient{config: daq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := daq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := daq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(deliveryaddress.Table, deliveryaddress.FieldID, selector),
			sqlgraph.To(order.Table, order.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, deliveryaddress.OrdersTable, deliveryaddress.OrdersColumn),
		)
		fromU = sqlgraph.SetNeighbors(daq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first DeliveryAddress entity from the query.
// Returns a *NotFoundError when no DeliveryAddress was found.
func (daq *DeliveryAddressQuery) First(ctx context.Context) (*DeliveryAddress, error) {
	nodes, err := daq.Limit(1).All(setContextOp(ctx, daq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{deliveryaddress.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (daq *DeliveryAddressQuery) FirstX(ctx context.Context) *DeliveryAddress {
	node, err := daq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first DeliveryAddress ID from the query.
// Returns a *NotFoundError when no DeliveryAddress ID was found.
func (daq *DeliveryAddressQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = daq.Limit(1).IDs(setContextOp(ctx, daq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{deliveryaddress.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (daq *DeliveryAddressQuery) FirstIDX(ctx context.Context) int {
	id, err := daq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single DeliveryAddress entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one DeliveryAddress entity is found.
// Returns a *NotFoundError when no DeliveryAddress entities are found.
func (daq *DeliveryAddressQuery) Only(ctx context.Context) (*DeliveryAddress, error) {
	nodes, err := daq.Limit(2).All(setContextOp(ctx, daq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{deliveryaddress.Label}
	default:
		return nil, &NotSingularError{deliveryaddress.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (daq *DeliveryAddressQuery) OnlyX(ctx context.Context) *DeliveryAddress {
	node, err := daq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only DeliveryAddress ID in the query.
// Returns a *NotSingularError when more than one DeliveryAddress ID is found.
// Returns a *NotFoundError when no entities are found.
func (daq *DeliveryAddressQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = daq.Limit(2).IDs(setContextOp(ctx, daq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{deliveryaddress.Label}
	default:
		err = &NotSingularError{deliveryaddress.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (daq *DeliveryAddressQuery) OnlyIDX(ctx context.Context) int {
	id, err := daq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of DeliveryAddresses.
func (daq *DeliveryAddressQuery) All(ctx context.Context) ([]*DeliveryAddress, error) {
	ctx = setContextOp(ctx, daq.ctx, "All")
	if err := daq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*DeliveryAddress, *DeliveryAddressQuery]()
	return withInterceptors[[]*DeliveryAddress](ctx, daq, qr, daq.inters)
}

// AllX is like All, but panics if an error occurs.
func (daq *DeliveryAddressQuery) AllX(ctx context.Context) []*DeliveryAddress {
	nodes, err := daq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of DeliveryAddress IDs.
func (daq *DeliveryAddressQuery) IDs(ctx context.Context) (ids []int, err error) {
	if daq.ctx.Unique == nil && daq.path != nil {
		daq.Unique(true)
	}
	ctx = setContextOp(ctx, daq.ctx, "IDs")
	if err = daq.Select(deliveryaddress.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (daq *DeliveryAddressQuery) IDsX(ctx context.Context) []int {
	ids, err := daq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (daq *DeliveryAddressQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, daq.ctx, "Count")
	if err := daq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, daq, querierCount[*DeliveryAddressQuery](), daq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (daq *DeliveryAddressQuery) CountX(ctx context.Context) int {
	count, err := daq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (daq *DeliveryAddressQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, daq.ctx, "Exist")
	switch _, err := daq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (daq *DeliveryAddressQuery) ExistX(ctx context.Context) bool {
	exist, err := daq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the DeliveryAddressQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (daq *DeliveryAddressQuery) Clone() *DeliveryAddressQuery {
	if daq == nil {
		return nil
	}
	return &DeliveryAddressQuery{
		config:        daq.config,
		ctx:           daq.ctx.Clone(),
		order:         append([]deliveryaddress.OrderOption{}, daq.order...),
		inters:        append([]Interceptor{}, daq.inters...),
		predicates:    append([]predicate.DeliveryAddress{}, daq.predicates...),
		withTelephone: daq.withTelephone.Clone(),
		withNotes:     daq.withNotes.Clone(),
		withCustomer:  daq.withCustomer.Clone(),
		withOrders:    daq.withOrders.Clone(),
		// clone intermediate query.
		sql:  daq.sql.Clone(),
		path: daq.path,
	}
}

// WithTelephone tells the query-builder to eager-load the nodes that are connected to
// the "telephone" edge. The optional arguments are used to configure the query builder of the edge.
func (daq *DeliveryAddressQuery) WithTelephone(opts ...func(*TelQuery)) *DeliveryAddressQuery {
	query := (&TelClient{config: daq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	daq.withTelephone = query
	return daq
}

// WithNotes tells the query-builder to eager-load the nodes that are connected to
// the "notes" edge. The optional arguments are used to configure the query builder of the edge.
func (daq *DeliveryAddressQuery) WithNotes(opts ...func(*NoteQuery)) *DeliveryAddressQuery {
	query := (&NoteClient{config: daq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	daq.withNotes = query
	return daq
}

// WithCustomer tells the query-builder to eager-load the nodes that are connected to
// the "customer" edge. The optional arguments are used to configure the query builder of the edge.
func (daq *DeliveryAddressQuery) WithCustomer(opts ...func(*CustomerQuery)) *DeliveryAddressQuery {
	query := (&CustomerClient{config: daq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	daq.withCustomer = query
	return daq
}

// WithOrders tells the query-builder to eager-load the nodes that are connected to
// the "orders" edge. The optional arguments are used to configure the query builder of the edge.
func (daq *DeliveryAddressQuery) WithOrders(opts ...func(*OrderQuery)) *DeliveryAddressQuery {
	query := (&OrderClient{config: daq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	daq.withOrders = query
	return daq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		City string `json:"city,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.DeliveryAddress.Query().
//		GroupBy(deliveryaddress.FieldCity).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (daq *DeliveryAddressQuery) GroupBy(field string, fields ...string) *DeliveryAddressGroupBy {
	daq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &DeliveryAddressGroupBy{build: daq}
	grbuild.flds = &daq.ctx.Fields
	grbuild.label = deliveryaddress.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		City string `json:"city,omitempty"`
//	}
//
//	client.DeliveryAddress.Query().
//		Select(deliveryaddress.FieldCity).
//		Scan(ctx, &v)
func (daq *DeliveryAddressQuery) Select(fields ...string) *DeliveryAddressSelect {
	daq.ctx.Fields = append(daq.ctx.Fields, fields...)
	sbuild := &DeliveryAddressSelect{DeliveryAddressQuery: daq}
	sbuild.label = deliveryaddress.Label
	sbuild.flds, sbuild.scan = &daq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a DeliveryAddressSelect configured with the given aggregations.
func (daq *DeliveryAddressQuery) Aggregate(fns ...AggregateFunc) *DeliveryAddressSelect {
	return daq.Select().Aggregate(fns...)
}

func (daq *DeliveryAddressQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range daq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, daq); err != nil {
				return err
			}
		}
	}
	for _, f := range daq.ctx.Fields {
		if !deliveryaddress.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if daq.path != nil {
		prev, err := daq.path(ctx)
		if err != nil {
			return err
		}
		daq.sql = prev
	}
	return nil
}

func (daq *DeliveryAddressQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*DeliveryAddress, error) {
	var (
		nodes       = []*DeliveryAddress{}
		withFKs     = daq.withFKs
		_spec       = daq.querySpec()
		loadedTypes = [4]bool{
			daq.withTelephone != nil,
			daq.withNotes != nil,
			daq.withCustomer != nil,
			daq.withOrders != nil,
		}
	)
	if daq.withTelephone != nil || daq.withCustomer != nil || daq.withOrders != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, deliveryaddress.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*DeliveryAddress).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &DeliveryAddress{config: daq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, daq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := daq.withTelephone; query != nil {
		if err := daq.loadTelephone(ctx, query, nodes, nil,
			func(n *DeliveryAddress, e *Tel) { n.Edges.Telephone = e }); err != nil {
			return nil, err
		}
	}
	if query := daq.withNotes; query != nil {
		if err := daq.loadNotes(ctx, query, nodes,
			func(n *DeliveryAddress) { n.Edges.Notes = []*Note{} },
			func(n *DeliveryAddress, e *Note) { n.Edges.Notes = append(n.Edges.Notes, e) }); err != nil {
			return nil, err
		}
	}
	if query := daq.withCustomer; query != nil {
		if err := daq.loadCustomer(ctx, query, nodes, nil,
			func(n *DeliveryAddress, e *Customer) { n.Edges.Customer = e }); err != nil {
			return nil, err
		}
	}
	if query := daq.withOrders; query != nil {
		if err := daq.loadOrders(ctx, query, nodes, nil,
			func(n *DeliveryAddress, e *Order) { n.Edges.Orders = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (daq *DeliveryAddressQuery) loadTelephone(ctx context.Context, query *TelQuery, nodes []*DeliveryAddress, init func(*DeliveryAddress), assign func(*DeliveryAddress, *Tel)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*DeliveryAddress)
	for i := range nodes {
		if nodes[i].delivery_address_telephone == nil {
			continue
		}
		fk := *nodes[i].delivery_address_telephone
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(tel.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "delivery_address_telephone" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (daq *DeliveryAddressQuery) loadNotes(ctx context.Context, query *NoteQuery, nodes []*DeliveryAddress, init func(*DeliveryAddress), assign func(*DeliveryAddress, *Note)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*DeliveryAddress)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Note(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(deliveryaddress.NotesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.delivery_address_notes
		if fk == nil {
			return fmt.Errorf(`foreign-key "delivery_address_notes" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "delivery_address_notes" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (daq *DeliveryAddressQuery) loadCustomer(ctx context.Context, query *CustomerQuery, nodes []*DeliveryAddress, init func(*DeliveryAddress), assign func(*DeliveryAddress, *Customer)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*DeliveryAddress)
	for i := range nodes {
		if nodes[i].customer_delivery_addresses == nil {
			continue
		}
		fk := *nodes[i].customer_delivery_addresses
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(customer.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "customer_delivery_addresses" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (daq *DeliveryAddressQuery) loadOrders(ctx context.Context, query *OrderQuery, nodes []*DeliveryAddress, init func(*DeliveryAddress), assign func(*DeliveryAddress, *Order)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*DeliveryAddress)
	for i := range nodes {
		if nodes[i].order_delivery_address == nil {
			continue
		}
		fk := *nodes[i].order_delivery_address
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(order.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "order_delivery_address" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (daq *DeliveryAddressQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := daq.querySpec()
	_spec.Node.Columns = daq.ctx.Fields
	if len(daq.ctx.Fields) > 0 {
		_spec.Unique = daq.ctx.Unique != nil && *daq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, daq.driver, _spec)
}

func (daq *DeliveryAddressQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(deliveryaddress.Table, deliveryaddress.Columns, sqlgraph.NewFieldSpec(deliveryaddress.FieldID, field.TypeInt))
	_spec.From = daq.sql
	if unique := daq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if daq.path != nil {
		_spec.Unique = true
	}
	if fields := daq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, deliveryaddress.FieldID)
		for i := range fields {
			if fields[i] != deliveryaddress.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := daq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := daq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := daq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := daq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (daq *DeliveryAddressQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(daq.driver.Dialect())
	t1 := builder.Table(deliveryaddress.Table)
	columns := daq.ctx.Fields
	if len(columns) == 0 {
		columns = deliveryaddress.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if daq.sql != nil {
		selector = daq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if daq.ctx.Unique != nil && *daq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range daq.predicates {
		p(selector)
	}
	for _, p := range daq.order {
		p(selector)
	}
	if offset := daq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := daq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// DeliveryAddressGroupBy is the group-by builder for DeliveryAddress entities.
type DeliveryAddressGroupBy struct {
	selector
	build *DeliveryAddressQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (dagb *DeliveryAddressGroupBy) Aggregate(fns ...AggregateFunc) *DeliveryAddressGroupBy {
	dagb.fns = append(dagb.fns, fns...)
	return dagb
}

// Scan applies the selector query and scans the result into the given value.
func (dagb *DeliveryAddressGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, dagb.build.ctx, "GroupBy")
	if err := dagb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*DeliveryAddressQuery, *DeliveryAddressGroupBy](ctx, dagb.build, dagb, dagb.build.inters, v)
}

func (dagb *DeliveryAddressGroupBy) sqlScan(ctx context.Context, root *DeliveryAddressQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(dagb.fns))
	for _, fn := range dagb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*dagb.flds)+len(dagb.fns))
		for _, f := range *dagb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*dagb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := dagb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// DeliveryAddressSelect is the builder for selecting fields of DeliveryAddress entities.
type DeliveryAddressSelect struct {
	*DeliveryAddressQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (das *DeliveryAddressSelect) Aggregate(fns ...AggregateFunc) *DeliveryAddressSelect {
	das.fns = append(das.fns, fns...)
	return das
}

// Scan applies the selector query and scans the result into the given value.
func (das *DeliveryAddressSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, das.ctx, "Select")
	if err := das.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*DeliveryAddressQuery, *DeliveryAddressSelect](ctx, das.DeliveryAddressQuery, das, das.inters, v)
}

func (das *DeliveryAddressSelect) sqlScan(ctx context.Context, root *DeliveryAddressQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(das.fns))
	for _, fn := range das.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*das.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := das.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
