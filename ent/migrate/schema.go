// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// BillingAddressesColumns holds the columns for the "billing_addresses" table.
	BillingAddressesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "city", Type: field.TypeString},
		{Name: "street", Type: field.TypeString},
		{Name: "zip", Type: field.TypeString},
		{Name: "housenumber", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "customer_billing_addresses", Type: field.TypeInt, Nullable: true},
		{Name: "order_billing_address", Type: field.TypeInt, Unique: true, Nullable: true},
	}
	// BillingAddressesTable holds the schema information for the "billing_addresses" table.
	BillingAddressesTable = &schema.Table{
		Name:       "billing_addresses",
		Columns:    BillingAddressesColumns,
		PrimaryKey: []*schema.Column{BillingAddressesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "billing_addresses_customers_billing_addresses",
				Columns:    []*schema.Column{BillingAddressesColumns[7]},
				RefColumns: []*schema.Column{CustomersColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "billing_addresses_orders_billing_address",
				Columns:    []*schema.Column{BillingAddressesColumns[8]},
				RefColumns: []*schema.Column{OrdersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// CustomersColumns holds the columns for the "customers" table.
	CustomersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString, Unique: true, Size: 20},
		{Name: "gender", Type: field.TypeEnum, Enums: []string{"c", "m", "f", "d"}},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "customer_created_by", Type: field.TypeInt, Nullable: true},
	}
	// CustomersTable holds the schema information for the "customers" table.
	CustomersTable = &schema.Table{
		Name:       "customers",
		Columns:    CustomersColumns,
		PrimaryKey: []*schema.Column{CustomersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "customers_users_created_by",
				Columns:    []*schema.Column{CustomersColumns[5]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// DeliveryAddressesColumns holds the columns for the "delivery_addresses" table.
	DeliveryAddressesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "city", Type: field.TypeString},
		{Name: "street", Type: field.TypeString},
		{Name: "zip", Type: field.TypeString},
		{Name: "housenumber", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "customer_delivery_addresses", Type: field.TypeInt, Nullable: true},
		{Name: "delivery_address_telephone", Type: field.TypeInt, Nullable: true},
		{Name: "order_delivery_address", Type: field.TypeInt, Unique: true, Nullable: true},
	}
	// DeliveryAddressesTable holds the schema information for the "delivery_addresses" table.
	DeliveryAddressesTable = &schema.Table{
		Name:       "delivery_addresses",
		Columns:    DeliveryAddressesColumns,
		PrimaryKey: []*schema.Column{DeliveryAddressesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "delivery_addresses_customers_delivery_addresses",
				Columns:    []*schema.Column{DeliveryAddressesColumns[7]},
				RefColumns: []*schema.Column{CustomersColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "delivery_addresses_tels_telephone",
				Columns:    []*schema.Column{DeliveryAddressesColumns[8]},
				RefColumns: []*schema.Column{TelsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "delivery_addresses_orders_delivery_address",
				Columns:    []*schema.Column{DeliveryAddressesColumns[9]},
				RefColumns: []*schema.Column{OrdersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// LoginsColumns holds the columns for the "logins" table.
	LoginsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "password", Type: field.TypeString},
		{Name: "email", Type: field.TypeString},
		{Name: "last_login", Type: field.TypeTime},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "customer_login", Type: field.TypeInt, Unique: true, Nullable: true},
	}
	// LoginsTable holds the schema information for the "logins" table.
	LoginsTable = &schema.Table{
		Name:       "logins",
		Columns:    LoginsColumns,
		PrimaryKey: []*schema.Column{LoginsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "logins_customers_login",
				Columns:    []*schema.Column{LoginsColumns[6]},
				RefColumns: []*schema.Column{CustomersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// LoginResetsColumns holds the columns for the "login_resets" table.
	LoginResetsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "token", Type: field.TypeString, Unique: true},
		{Name: "active", Type: field.TypeBool, Default: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "login_login_resets", Type: field.TypeInt, Nullable: true},
	}
	// LoginResetsTable holds the schema information for the "login_resets" table.
	LoginResetsTable = &schema.Table{
		Name:       "login_resets",
		Columns:    LoginResetsColumns,
		PrimaryKey: []*schema.Column{LoginResetsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "login_resets_logins_login_resets",
				Columns:    []*schema.Column{LoginResetsColumns[5]},
				RefColumns: []*schema.Column{LoginsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// NotesColumns holds the columns for the "notes" table.
	NotesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "title", Type: field.TypeString, Size: 200},
		{Name: "content", Type: field.TypeString, Size: 1000},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "billing_address_notes", Type: field.TypeInt, Nullable: true},
		{Name: "customer_notes", Type: field.TypeInt, Nullable: true},
		{Name: "delivery_address_notes", Type: field.TypeInt, Nullable: true},
		{Name: "login_notes", Type: field.TypeInt, Nullable: true},
		{Name: "login_reset_notes", Type: field.TypeInt, Nullable: true},
		{Name: "note_created_by", Type: field.TypeInt, Nullable: true},
		{Name: "order_notes", Type: field.TypeInt, Nullable: true},
		{Name: "position_notes", Type: field.TypeInt, Nullable: true},
		{Name: "product_notes", Type: field.TypeInt, Nullable: true},
		{Name: "role_notes", Type: field.TypeInt, Nullable: true},
		{Name: "tel_notes", Type: field.TypeInt, Nullable: true},
		{Name: "user_notes", Type: field.TypeInt, Nullable: true},
	}
	// NotesTable holds the schema information for the "notes" table.
	NotesTable = &schema.Table{
		Name:       "notes",
		Columns:    NotesColumns,
		PrimaryKey: []*schema.Column{NotesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "notes_billing_addresses_notes",
				Columns:    []*schema.Column{NotesColumns[5]},
				RefColumns: []*schema.Column{BillingAddressesColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "notes_customers_notes",
				Columns:    []*schema.Column{NotesColumns[6]},
				RefColumns: []*schema.Column{CustomersColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "notes_delivery_addresses_notes",
				Columns:    []*schema.Column{NotesColumns[7]},
				RefColumns: []*schema.Column{DeliveryAddressesColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "notes_logins_notes",
				Columns:    []*schema.Column{NotesColumns[8]},
				RefColumns: []*schema.Column{LoginsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "notes_login_resets_notes",
				Columns:    []*schema.Column{NotesColumns[9]},
				RefColumns: []*schema.Column{LoginResetsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "notes_users_created_by",
				Columns:    []*schema.Column{NotesColumns[10]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "notes_orders_notes",
				Columns:    []*schema.Column{NotesColumns[11]},
				RefColumns: []*schema.Column{OrdersColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "notes_positions_notes",
				Columns:    []*schema.Column{NotesColumns[12]},
				RefColumns: []*schema.Column{PositionsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "notes_products_notes",
				Columns:    []*schema.Column{NotesColumns[13]},
				RefColumns: []*schema.Column{ProductsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "notes_roles_notes",
				Columns:    []*schema.Column{NotesColumns[14]},
				RefColumns: []*schema.Column{RolesColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "notes_tels_notes",
				Columns:    []*schema.Column{NotesColumns[15]},
				RefColumns: []*schema.Column{TelsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "notes_users_notes",
				Columns:    []*schema.Column{NotesColumns[16]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// OrdersColumns holds the columns for the "orders" table.
	OrdersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "tax", Type: field.TypeFloat64},
		{Name: "due", Type: field.TypeTime},
		{Name: "printed_at", Type: field.TypeTime},
		{Name: "payed_at", Type: field.TypeTime},
		{Name: "done_at", Type: field.TypeTime},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "customer_orders", Type: field.TypeInt, Nullable: true},
		{Name: "order_customer", Type: field.TypeInt, Nullable: true},
		{Name: "order_created_by", Type: field.TypeInt, Nullable: true},
	}
	// OrdersTable holds the schema information for the "orders" table.
	OrdersTable = &schema.Table{
		Name:       "orders",
		Columns:    OrdersColumns,
		PrimaryKey: []*schema.Column{OrdersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "orders_customers_orders",
				Columns:    []*schema.Column{OrdersColumns[8]},
				RefColumns: []*schema.Column{CustomersColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "orders_customers_customer",
				Columns:    []*schema.Column{OrdersColumns[9]},
				RefColumns: []*schema.Column{CustomersColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "orders_users_created_by",
				Columns:    []*schema.Column{OrdersColumns[10]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// PositionsColumns holds the columns for the "positions" table.
	PositionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString, Size: 40},
		{Name: "description", Type: field.TypeString, Nullable: true, Size: 20},
		{Name: "unit_price", Type: field.TypeFloat64},
		{Name: "amount", Type: field.TypeInt, Default: 1},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "order_positions", Type: field.TypeInt, Nullable: true},
	}
	// PositionsTable holds the schema information for the "positions" table.
	PositionsTable = &schema.Table{
		Name:       "positions",
		Columns:    PositionsColumns,
		PrimaryKey: []*schema.Column{PositionsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "positions_orders_positions",
				Columns:    []*schema.Column{PositionsColumns[6]},
				RefColumns: []*schema.Column{OrdersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// ProductsColumns holds the columns for the "products" table.
	ProductsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString, Unique: true},
		{Name: "description", Type: field.TypeString, Nullable: true},
		{Name: "price", Type: field.TypeFloat64},
	}
	// ProductsTable holds the schema information for the "products" table.
	ProductsTable = &schema.Table{
		Name:       "products",
		Columns:    ProductsColumns,
		PrimaryKey: []*schema.Column{ProductsColumns[0]},
	}
	// RolesColumns holds the columns for the "roles" table.
	RolesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString, Size: 50},
	}
	// RolesTable holds the schema information for the "roles" table.
	RolesTable = &schema.Table{
		Name:       "roles",
		Columns:    RolesColumns,
		PrimaryKey: []*schema.Column{RolesColumns[0]},
	}
	// TelsColumns holds the columns for the "tels" table.
	TelsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "tel", Type: field.TypeString, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "customer_tels", Type: field.TypeInt, Nullable: true},
	}
	// TelsTable holds the schema information for the "tels" table.
	TelsTable = &schema.Table{
		Name:       "tels",
		Columns:    TelsColumns,
		PrimaryKey: []*schema.Column{TelsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "tels_customers_tels",
				Columns:    []*schema.Column{TelsColumns[4]},
				RefColumns: []*schema.Column{CustomersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString, Unique: true, Size: 20},
		{Name: "username", Type: field.TypeString, Unique: true},
		{Name: "password", Type: field.TypeString},
		{Name: "last_login", Type: field.TypeTime, Nullable: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
	}
	// UserSessionsColumns holds the columns for the "user_sessions" table.
	UserSessionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "token", Type: field.TypeString, Size: 32},
		{Name: "active", Type: field.TypeBool, Default: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "user_session_user", Type: field.TypeInt, Nullable: true},
	}
	// UserSessionsTable holds the schema information for the "user_sessions" table.
	UserSessionsTable = &schema.Table{
		Name:       "user_sessions",
		Columns:    UserSessionsColumns,
		PrimaryKey: []*schema.Column{UserSessionsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "user_sessions_users_user",
				Columns:    []*schema.Column{UserSessionsColumns[5]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		BillingAddressesTable,
		CustomersTable,
		DeliveryAddressesTable,
		LoginsTable,
		LoginResetsTable,
		NotesTable,
		OrdersTable,
		PositionsTable,
		ProductsTable,
		RolesTable,
		TelsTable,
		UsersTable,
		UserSessionsTable,
	}
)

func init() {
	BillingAddressesTable.ForeignKeys[0].RefTable = CustomersTable
	BillingAddressesTable.ForeignKeys[1].RefTable = OrdersTable
	CustomersTable.ForeignKeys[0].RefTable = UsersTable
	DeliveryAddressesTable.ForeignKeys[0].RefTable = CustomersTable
	DeliveryAddressesTable.ForeignKeys[1].RefTable = TelsTable
	DeliveryAddressesTable.ForeignKeys[2].RefTable = OrdersTable
	LoginsTable.ForeignKeys[0].RefTable = CustomersTable
	LoginResetsTable.ForeignKeys[0].RefTable = LoginsTable
	NotesTable.ForeignKeys[0].RefTable = BillingAddressesTable
	NotesTable.ForeignKeys[1].RefTable = CustomersTable
	NotesTable.ForeignKeys[2].RefTable = DeliveryAddressesTable
	NotesTable.ForeignKeys[3].RefTable = LoginsTable
	NotesTable.ForeignKeys[4].RefTable = LoginResetsTable
	NotesTable.ForeignKeys[5].RefTable = UsersTable
	NotesTable.ForeignKeys[6].RefTable = OrdersTable
	NotesTable.ForeignKeys[7].RefTable = PositionsTable
	NotesTable.ForeignKeys[8].RefTable = ProductsTable
	NotesTable.ForeignKeys[9].RefTable = RolesTable
	NotesTable.ForeignKeys[10].RefTable = TelsTable
	NotesTable.ForeignKeys[11].RefTable = UsersTable
	OrdersTable.ForeignKeys[0].RefTable = CustomersTable
	OrdersTable.ForeignKeys[1].RefTable = CustomersTable
	OrdersTable.ForeignKeys[2].RefTable = UsersTable
	PositionsTable.ForeignKeys[0].RefTable = OrdersTable
	TelsTable.ForeignKeys[0].RefTable = CustomersTable
	UserSessionsTable.ForeignKeys[0].RefTable = UsersTable
}
