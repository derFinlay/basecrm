// Code generated by ent, DO NOT EDIT.

package order

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/derfinlay/basecrm/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldID, id))
}

// Tax applies equality check predicate on the "tax" field. It's identical to TaxEQ.
func Tax(v float64) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldTax, v))
}

// Due applies equality check predicate on the "due" field. It's identical to DueEQ.
func Due(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldDue, v))
}

// PrintedAt applies equality check predicate on the "printed_at" field. It's identical to PrintedAtEQ.
func PrintedAt(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldPrintedAt, v))
}

// PayedAt applies equality check predicate on the "payed_at" field. It's identical to PayedAtEQ.
func PayedAt(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldPayedAt, v))
}

// DoneAt applies equality check predicate on the "done_at" field. It's identical to DoneAtEQ.
func DoneAt(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldDoneAt, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldUpdatedAt, v))
}

// TaxEQ applies the EQ predicate on the "tax" field.
func TaxEQ(v float64) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldTax, v))
}

// TaxNEQ applies the NEQ predicate on the "tax" field.
func TaxNEQ(v float64) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldTax, v))
}

// TaxIn applies the In predicate on the "tax" field.
func TaxIn(vs ...float64) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldTax, vs...))
}

// TaxNotIn applies the NotIn predicate on the "tax" field.
func TaxNotIn(vs ...float64) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldTax, vs...))
}

// TaxGT applies the GT predicate on the "tax" field.
func TaxGT(v float64) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldTax, v))
}

// TaxGTE applies the GTE predicate on the "tax" field.
func TaxGTE(v float64) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldTax, v))
}

// TaxLT applies the LT predicate on the "tax" field.
func TaxLT(v float64) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldTax, v))
}

// TaxLTE applies the LTE predicate on the "tax" field.
func TaxLTE(v float64) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldTax, v))
}

// DueEQ applies the EQ predicate on the "due" field.
func DueEQ(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldDue, v))
}

// DueNEQ applies the NEQ predicate on the "due" field.
func DueNEQ(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldDue, v))
}

// DueIn applies the In predicate on the "due" field.
func DueIn(vs ...time.Time) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldDue, vs...))
}

// DueNotIn applies the NotIn predicate on the "due" field.
func DueNotIn(vs ...time.Time) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldDue, vs...))
}

// DueGT applies the GT predicate on the "due" field.
func DueGT(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldDue, v))
}

// DueGTE applies the GTE predicate on the "due" field.
func DueGTE(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldDue, v))
}

// DueLT applies the LT predicate on the "due" field.
func DueLT(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldDue, v))
}

// DueLTE applies the LTE predicate on the "due" field.
func DueLTE(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldDue, v))
}

// PrintedAtEQ applies the EQ predicate on the "printed_at" field.
func PrintedAtEQ(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldPrintedAt, v))
}

// PrintedAtNEQ applies the NEQ predicate on the "printed_at" field.
func PrintedAtNEQ(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldPrintedAt, v))
}

// PrintedAtIn applies the In predicate on the "printed_at" field.
func PrintedAtIn(vs ...time.Time) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldPrintedAt, vs...))
}

// PrintedAtNotIn applies the NotIn predicate on the "printed_at" field.
func PrintedAtNotIn(vs ...time.Time) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldPrintedAt, vs...))
}

// PrintedAtGT applies the GT predicate on the "printed_at" field.
func PrintedAtGT(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldPrintedAt, v))
}

// PrintedAtGTE applies the GTE predicate on the "printed_at" field.
func PrintedAtGTE(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldPrintedAt, v))
}

// PrintedAtLT applies the LT predicate on the "printed_at" field.
func PrintedAtLT(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldPrintedAt, v))
}

// PrintedAtLTE applies the LTE predicate on the "printed_at" field.
func PrintedAtLTE(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldPrintedAt, v))
}

// PayedAtEQ applies the EQ predicate on the "payed_at" field.
func PayedAtEQ(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldPayedAt, v))
}

// PayedAtNEQ applies the NEQ predicate on the "payed_at" field.
func PayedAtNEQ(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldPayedAt, v))
}

// PayedAtIn applies the In predicate on the "payed_at" field.
func PayedAtIn(vs ...time.Time) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldPayedAt, vs...))
}

// PayedAtNotIn applies the NotIn predicate on the "payed_at" field.
func PayedAtNotIn(vs ...time.Time) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldPayedAt, vs...))
}

// PayedAtGT applies the GT predicate on the "payed_at" field.
func PayedAtGT(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldPayedAt, v))
}

// PayedAtGTE applies the GTE predicate on the "payed_at" field.
func PayedAtGTE(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldPayedAt, v))
}

// PayedAtLT applies the LT predicate on the "payed_at" field.
func PayedAtLT(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldPayedAt, v))
}

// PayedAtLTE applies the LTE predicate on the "payed_at" field.
func PayedAtLTE(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldPayedAt, v))
}

// DoneAtEQ applies the EQ predicate on the "done_at" field.
func DoneAtEQ(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldDoneAt, v))
}

// DoneAtNEQ applies the NEQ predicate on the "done_at" field.
func DoneAtNEQ(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldDoneAt, v))
}

// DoneAtIn applies the In predicate on the "done_at" field.
func DoneAtIn(vs ...time.Time) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldDoneAt, vs...))
}

// DoneAtNotIn applies the NotIn predicate on the "done_at" field.
func DoneAtNotIn(vs ...time.Time) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldDoneAt, vs...))
}

// DoneAtGT applies the GT predicate on the "done_at" field.
func DoneAtGT(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldDoneAt, v))
}

// DoneAtGTE applies the GTE predicate on the "done_at" field.
func DoneAtGTE(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldDoneAt, v))
}

// DoneAtLT applies the LT predicate on the "done_at" field.
func DoneAtLT(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldDoneAt, v))
}

// DoneAtLTE applies the LTE predicate on the "done_at" field.
func DoneAtLTE(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldDoneAt, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasCustomer applies the HasEdge predicate on the "customer" edge.
func HasCustomer() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, CustomerTable, CustomerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCustomerWith applies the HasEdge predicate on the "customer" edge with a given conditions (other predicates).
func HasCustomerWith(preds ...predicate.Customer) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		step := newCustomerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBillingAddress applies the HasEdge predicate on the "billing_address" edge.
func HasBillingAddress() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, BillingAddressTable, BillingAddressColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBillingAddressWith applies the HasEdge predicate on the "billing_address" edge with a given conditions (other predicates).
func HasBillingAddressWith(preds ...predicate.BillingAddress) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		step := newBillingAddressStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDeliveryAddress applies the HasEdge predicate on the "delivery_address" edge.
func HasDeliveryAddress() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, DeliveryAddressTable, DeliveryAddressColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDeliveryAddressWith applies the HasEdge predicate on the "delivery_address" edge with a given conditions (other predicates).
func HasDeliveryAddressWith(preds ...predicate.DeliveryAddress) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		step := newDeliveryAddressStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasNotes applies the HasEdge predicate on the "notes" edge.
func HasNotes() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, NotesTable, NotesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasNotesWith applies the HasEdge predicate on the "notes" edge with a given conditions (other predicates).
func HasNotesWith(preds ...predicate.Note) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		step := newNotesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCreatedBy applies the HasEdge predicate on the "created_by" edge.
func HasCreatedBy() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, CreatedByTable, CreatedByColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCreatedByWith applies the HasEdge predicate on the "created_by" edge with a given conditions (other predicates).
func HasCreatedByWith(preds ...predicate.User) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		step := newCreatedByStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPositions applies the HasEdge predicate on the "positions" edge.
func HasPositions() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PositionsTable, PositionsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPositionsWith applies the HasEdge predicate on the "positions" edge with a given conditions (other predicates).
func HasPositionsWith(preds ...predicate.Position) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		step := newPositionsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Order) predicate.Order {
	return predicate.Order(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Order) predicate.Order {
	return predicate.Order(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Order) predicate.Order {
	return predicate.Order(sql.NotPredicates(p))
}
