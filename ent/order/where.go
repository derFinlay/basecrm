// Code generated by ent, DO NOT EDIT.

package order

import (
	"entgo.io/ent/dialect/sql"
	"github.com/derfinlay/basecrm/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldID, id))
}

// Test applies equality check predicate on the "test" field. It's identical to TestEQ.
func Test(v string) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldTest, v))
}

// TestEQ applies the EQ predicate on the "test" field.
func TestEQ(v string) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldTest, v))
}

// TestNEQ applies the NEQ predicate on the "test" field.
func TestNEQ(v string) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldTest, v))
}

// TestIn applies the In predicate on the "test" field.
func TestIn(vs ...string) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldTest, vs...))
}

// TestNotIn applies the NotIn predicate on the "test" field.
func TestNotIn(vs ...string) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldTest, vs...))
}

// TestGT applies the GT predicate on the "test" field.
func TestGT(v string) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldTest, v))
}

// TestGTE applies the GTE predicate on the "test" field.
func TestGTE(v string) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldTest, v))
}

// TestLT applies the LT predicate on the "test" field.
func TestLT(v string) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldTest, v))
}

// TestLTE applies the LTE predicate on the "test" field.
func TestLTE(v string) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldTest, v))
}

// TestContains applies the Contains predicate on the "test" field.
func TestContains(v string) predicate.Order {
	return predicate.Order(sql.FieldContains(FieldTest, v))
}

// TestHasPrefix applies the HasPrefix predicate on the "test" field.
func TestHasPrefix(v string) predicate.Order {
	return predicate.Order(sql.FieldHasPrefix(FieldTest, v))
}

// TestHasSuffix applies the HasSuffix predicate on the "test" field.
func TestHasSuffix(v string) predicate.Order {
	return predicate.Order(sql.FieldHasSuffix(FieldTest, v))
}

// TestEqualFold applies the EqualFold predicate on the "test" field.
func TestEqualFold(v string) predicate.Order {
	return predicate.Order(sql.FieldEqualFold(FieldTest, v))
}

// TestContainsFold applies the ContainsFold predicate on the "test" field.
func TestContainsFold(v string) predicate.Order {
	return predicate.Order(sql.FieldContainsFold(FieldTest, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Order) predicate.Order {
	return predicate.Order(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Order) predicate.Order {
	return predicate.Order(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Order) predicate.Order {
	return predicate.Order(sql.NotPredicates(p))
}
